<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>冲突域和广播域</title>
      <link href="/2021/10/10/3%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E5%86%B2%E7%AA%81%E5%9F%9F%E5%92%8C%E5%B9%BF%E6%92%AD%E5%9F%9F/"/>
      <url>/2021/10/10/3%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E5%86%B2%E7%AA%81%E5%9F%9F%E5%92%8C%E5%B9%BF%E6%92%AD%E5%9F%9F/</url>
      
        <content type="html"><![CDATA[<p>数据链路层设备（网桥，交换机）、网络层设备（路由器）都可以划分冲突域</p><p>网络层设备（路由器）可以划分广播域</p><!-- 一个交换机端口一个冲突域，一个网段一个广播域，划分vlan后，一个vlan一个广播域 -->]]></content>
      
      
      <categories>
          
          <category> 考研 </category>
          
          <category> 408 </category>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 考研 </tag>
            
            <tag> 计算机网络 </tag>
            
            <tag> 408 </tag>
            
            <tag> 大题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>五种重要的报文</title>
      <link href="/2021/10/10/3%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E4%BA%94%E7%A7%8D%E9%87%8D%E8%A6%81%E7%9A%84%E6%8A%A5%E6%96%87/"/>
      <url>/2021/10/10/3%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E4%BA%94%E7%A7%8D%E9%87%8D%E8%A6%81%E7%9A%84%E6%8A%A5%E6%96%87/</url>
      
        <content type="html"><![CDATA[<h1 id="IP分组"><a href="#IP分组" class="headerlink" title="IP分组"></a>IP分组</h1><ol><li>首部固定部分为20B，首部最大值为60B</li><li>总长度（1）+片偏移的单位（8）+首部长度（4）（“一种八片首饰”）</li><li>标志位MF和DF在分片时的取值</li><li>生存时间TTL，经过一个路由器减去1，直到为0</li><li>首部校验和字段只校验首部</li><li>源地址和目的地址字段长度都为4B</li></ol><h1 id="UDP数据报"><a href="#UDP数据报" class="headerlink" title="UDP数据报"></a>UDP数据报</h1><ol><li>首部8B，由4个字段组成（都是2B）</li><li>长度字段包括首部+数据部分</li><li>检验和检验首部+数据部分（可选）</li></ol><h1 id="TCP报文段"><a href="#TCP报文段" class="headerlink" title="TCP报文段"></a>TCP报文段</h1><ol><li>首部固定部分为20B，最大值为60B（和IP分组一样）</li><li>源端口和目的端口各占2B</li><li>序号（本报文段第一个字节的序号）和确认号（期望收到下一个的序号）各占4B</li><li>数据偏移=首部长度（4B整数倍）</li><li>确认位ACK、同步位SYN、终止位FIN什么时候为0/1</li><li>窗口字段表示允许对方发送的数据量（流量控制用）</li></ol><h1 id="HTTP报文"><a href="#HTTP报文" class="headerlink" title="HTTP报文"></a>HTTP报文</h1><p>HTTP报文分为请求报文&amp;响应报文<br>请求报文：<br>1.请求行：请求方法（常用get/post）、请求URL、HTTP协议版本 2.首部行 3.请求体/实体主体<br>响应报文：<br>1.状态行 2.响应头部 3.响应体</p><h1 id="MAC帧"><a href="#MAC帧" class="headerlink" title="MAC帧"></a>MAC帧</h1><ol><li>前同步码8B</li><li>MAC地址长度6B</li><li>数据长度为46-1500B，首部和尾部是18B，因此最短帧长64B</li></ol>]]></content>
      
      
      <categories>
          
          <category> 考研 </category>
          
          <category> 408 </category>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 考研 </tag>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三个重要的表</title>
      <link href="/2021/10/10/3%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E4%B8%89%E4%B8%AA%E9%87%8D%E8%A6%81%E7%9A%84%E8%A1%A8/"/>
      <url>/2021/10/10/3%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E4%B8%89%E4%B8%AA%E9%87%8D%E8%A6%81%E7%9A%84%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="转发表（数据链路层：网桥、交换机）"><a href="#转发表（数据链路层：网桥、交换机）" class="headerlink" title="转发表（数据链路层：网桥、交换机）"></a>转发表（数据链路层：网桥、交换机）</h1><p>【考过大题】转发表的建立是<strong>被动</strong>的</p><p>即：当有一个数据帧从A发送到网桥的1号端口，转发表才知道A在1端口方向并登记</p><p>登记完毕，从已知的信息判断是进行转发还是丢弃</p><p>若网桥的转发表写了B在2号端口方向，自然转发到2号端口</p><p>若转发表什么都没写，就进行广播，每个端口都进行转发</p><p>若写了B在1号端口方向，但是数据帧是1号来的，则丢弃</p><p><a href="https://imgtu.com/i/5EmV7F"><img src="https://z3.ax1x.com/2021/10/10/5EmV7F.png" alt="5EmV7F.png"></a></p><h1 id="ARP表（网络层：主机、路由器）"><a href="#ARP表（网络层：主机、路由器）" class="headerlink" title="ARP表（网络层：主机、路由器）"></a>ARP表（网络层：主机、路由器）</h1><p>关键词：<strong>广播</strong>。每10~20min更新一次</p><p>主机/路由器当收到一个分组的时候，进行检查ARP高速缓存（ARP表）</p><p>有就算了，没有的话进行<strong>广播</strong>，来问MAC地址</p><p>方法：本来把这个分组的目的MAC地址填上<strong>FF-FF-FF-FF-FF-FF</strong>，这样它就变成了一个广播的分组，能发给所有的主机（同局域网内的）</p><p>目的主机收到了分组，就会告诉源主机自己的MAC地址（向源主机<strong>单播</strong>一个ARP响应分组） </p><h1 id="路由表（路由器）"><a href="#路由表（路由器）" class="headerlink" title="路由表（路由器）"></a>路由表（路由器）</h1><p><a href="https://imgtu.com/i/5EutSA"><img src="https://z3.ax1x.com/2021/10/10/5EutSA.png" alt="5EutSA.png"></a></p><p>默认路由：不知道目的网络IP地址的时候，就填0.0.0.0，子网掩码也是0.0.0.0</p><p>这样就会发到组长（网关）那里。让组长看看自己的路由表项有没有</p><p>（网关：两个不同的网络的设备）</p><p>如果组长也不知道，那么组长也填0，发给大组长。。。</p><p>这个过程不会一直持续下去的，因为IP分组有一个TTL，每经过一个路由器TTL–，减到0就被丢弃了</p><p>不会持续的另一个原因是，如果使用RIP算法，跳数16记为不可达，也会被丢弃</p><h2 id="RIP"><a href="#RIP" class="headerlink" title="RIP"></a>RIP</h2><p>路由器L1会定时接到相邻路由器L2的整个路由表</p><p>L1将能抄的抄到自己的路由表上，当然不要忘记把“距离”项+1，“下一跳”项填L2</p><p>如果距离都到16了，那就是不可达了，这行不抄</p><p>如果某一项，自己原来的距离比L2的还短/一样，不抄<br>（！！但是！也不是绝对的，如果原来的表项也是下一跳L2，那还是要更新的啊，说明现在网络拥堵了啊）</p><ol><li>能不动就不动</li><li>路径最短</li><li>正主（下一跳）发话必须更新</li></ol><h1 id="主机A请求baidu的全过程"><a href="#主机A请求baidu的全过程" class="headerlink" title="主机A请求baidu的全过程"></a>主机A请求baidu的全过程</h1><ol><li>向DNS服务器查找<a href="http://www.baidu.com的ip地址,得出ip为12.34.56.78/">www.baidu.com的IP地址，得出IP为12.34.56.78</a></li><li>A自身的IP为13.24.35.46，自身MAC地址为AS-DF-GH-JK-LL-ZX-CV-BN</li><li></li></ol>]]></content>
      
      
      <categories>
          
          <category> 考研 </category>
          
          <category> 408 </category>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 考研 </tag>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计网大题</title>
      <link href="/2021/10/09/3%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%BD%91%E5%A4%A7%E9%A2%98/"/>
      <url>/2021/10/09/3%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%BD%91%E5%A4%A7%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="链路层（2）"><a href="#链路层（2）" class="headerlink" title="链路层（2）"></a>链路层（2）</h1><h2 id="GBN"><a href="#GBN" class="headerlink" title="GBN"></a>GBN</h2><ol><li>帧顺序</li><li>信道利用率</li></ol><h2 id="CSNA-CD"><a href="#CSNA-CD" class="headerlink" title="CSNA/CD"></a>CSNA/CD</h2><ol><li>检测到冲突的时间</li><li>有效数据传输率</li></ol><h1 id="网络层（5）"><a href="#网络层（5）" class="headerlink" title="网络层（5）"></a>网络层（5）</h1><h2 id="地址问题"><a href="#地址问题" class="headerlink" title="地址问题"></a>地址问题</h2><ol><li>子网划分<ul><li>定长子网划分</li><li>变长子网划分</li></ul></li><li>路由聚合（构造路由表）</li></ol><h2 id="报文段问题"><a href="#报文段问题" class="headerlink" title="报文段问题"></a>报文段问题</h2><ol><li>数据报分片</li></ol><h2 id="路由问题"><a href="#路由问题" class="headerlink" title="路由问题"></a>路由问题</h2><ol><li>路由选择与转发（转接口+能收到数据报的设备）</li><li>路由协议</li></ol><h1 id="混合层"><a href="#混合层" class="headerlink" title="混合层"></a>混合层</h1><h2 id="网络层-链路层"><a href="#网络层-链路层" class="headerlink" title="网络层+链路层"></a>网络层+链路层</h2><ol><li>网络拓扑+mac帧</li><li>设备选择</li></ol><h2 id="网络层-传输层"><a href="#网络层-传输层" class="headerlink" title="网络层+传输层"></a>网络层+传输层</h2><ol><li>网络拓扑+TCP（过程+报文段）</li><li>数据报报文+TCP段</li></ol><h2 id="网络层-应用层（-链路层）"><a href="#网络层-应用层（-链路层）" class="headerlink" title="网络层+应用层（+链路层）"></a>网络层+应用层（+链路层）</h2><ol><li>报文字段+应用层应用（Web）</li></ol>]]></content>
      
      
      <categories>
          
          <category> 考研 </category>
          
          <category> 408 </category>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 考研 </tag>
            
            <tag> 计算机网络 </tag>
            
            <tag> 408 </tag>
            
            <tag> 大题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>八、常微分方程</title>
      <link href="/2021/10/06/1%20%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/8%20%E5%B8%B8%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B/"/>
      <url>/2021/10/06/1%20%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/8%20%E5%B8%B8%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<ol><li><input checked="" disabled="" type="checkbox"> 了解微分方程及其阶、解、通解、初始条件和特解等概念.</li><li><input checked="" disabled="" type="checkbox"> 掌握变量可分离的微分方程及一阶线性微分方程的解法.</li><li><input checked="" disabled="" type="checkbox"> 会解齐次微分方程、伯努利方程和全微分方程，会用简单的变量代换解某些微分方程.</li><li><input checked="" disabled="" type="checkbox"> 会用降阶法解下列形式的微分方程：$y^{(n)}=f(x)$，$y’’=f(x,y’)$和$y’’=f(y,y’)$</li><li><input checked="" disabled="" type="checkbox"> 理解线性微分方程解的性质及解的结构.</li><li><input checked="" disabled="" type="checkbox"> 掌握二阶常系数齐次线性微分方程的解法，并会解某些高于二阶的常系数齐次线性微分方程.</li><li><input checked="" disabled="" type="checkbox"> 会解自由项为多项式、指数函数、正弦函数余弦函数以及它们的和与积的二阶常系数非齐次线性微分方程.</li><li><input checked="" disabled="" type="checkbox"> 会解欧拉方程.</li><li><input checked="" disabled="" type="checkbox"> 会用微分方程解决一些简单的应用问题.</li></ol><span id="more"></span><h1 id="常微分方程的基本概念"><a href="#常微分方程的基本概念" class="headerlink" title="常微分方程的基本概念"></a>常微分方程的基本概念</h1><h2 id="变量可分离的微分方程-frac-dy-dx-varphi-1-x-varphi-2-y"><a href="#变量可分离的微分方程-frac-dy-dx-varphi-1-x-varphi-2-y" class="headerlink" title="变量可分离的微分方程 $\frac{dy}{dx} = \varphi_1(x)\varphi_2(y)$"></a>变量可分离的微分方程 $\frac{dy}{dx} = \varphi_1(x)\varphi_2(y)$</h2><h2 id="齐次微分方程-frac-dy-dx-varphi-frac-yx"><a href="#齐次微分方程-frac-dy-dx-varphi-frac-yx" class="headerlink" title="齐次微分方程 $\frac{dy}{dx} = \varphi (\frac yx)$"></a>齐次微分方程 $\frac{dy}{dx} = \varphi (\frac yx)$</h2><h2 id="一阶线性微分方程-frac-dy-dx-P-x-y-0"><a href="#一阶线性微分方程-frac-dy-dx-P-x-y-0" class="headerlink" title="一阶线性微分方程 $\frac{dy}{dx} + P(x)y=0$"></a>一阶线性微分方程 $\frac{dy}{dx} + P(x)y=0$</h2><h2 id="伯努利（Bernoulli）方程-frac-dy-dx-P-x-y-Q-x-y-n"><a href="#伯努利（Bernoulli）方程-frac-dy-dx-P-x-y-Q-x-y-n" class="headerlink" title="伯努利（Bernoulli）方程 $\frac{dy}{dx} + P(x)y=Q(x)y^n$"></a>伯努利（Bernoulli）方程 $\frac{dy}{dx} + P(x)y=Q(x)y^n$</h2><h2 id="全微分方程-P-x-y-dx-Q-x-y-dy-0"><a href="#全微分方程-P-x-y-dx-Q-x-y-dy-0" class="headerlink" title="全微分方程 $P(x,y)dx + Q(x,y)dy=0$"></a>全微分方程 $P(x,y)dx + Q(x,y)dy=0$</h2><h2 id="可用简单的变量代换求解的某些微分方程"><a href="#可用简单的变量代换求解的某些微分方程" class="headerlink" title="可用简单的变量代换求解的某些微分方程"></a>可用简单的变量代换求解的某些微分方程</h2><h2 id="可降阶的高阶微分方程"><a href="#可降阶的高阶微分方程" class="headerlink" title="可降阶的高阶微分方程"></a>可降阶的高阶微分方程</h2><h2 id="y-n-f-x"><a href="#y-n-f-x" class="headerlink" title="$y^{(n)} = f(x)$"></a>$y^{(n)} = f(x)$</h2><h2 id="f-x-y’-y’’-0"><a href="#f-x-y’-y’’-0" class="headerlink" title="$f(x,y’,y’’)=0$"></a>$f(x,y’,y’’)=0$</h2><h2 id="f-y-y’-y’’-0"><a href="#f-y-y’-y’’-0" class="headerlink" title="$f(y,y’,y’’)=0$"></a>$f(y,y’,y’’)=0$</h2><h2 id="线性微分方程解的性质及解的结构定理"><a href="#线性微分方程解的性质及解的结构定理" class="headerlink" title="线性微分方程解的性质及解的结构定理"></a>线性微分方程解的性质及解的结构定理</h2><h2 id="二阶常系数齐次线性微分方程"><a href="#二阶常系数齐次线性微分方程" class="headerlink" title="二阶常系数齐次线性微分方程"></a>二阶常系数齐次线性微分方程</h2><h2 id="高于二阶的某些常系数齐次线性微分方程"><a href="#高于二阶的某些常系数齐次线性微分方程" class="headerlink" title="高于二阶的某些常系数齐次线性微分方程"></a>高于二阶的某些常系数齐次线性微分方程</h2><h2 id="简单的二阶常系数非齐次线性微分方程"><a href="#简单的二阶常系数非齐次线性微分方程" class="headerlink" title="简单的二阶常系数非齐次线性微分方程"></a>简单的二阶常系数非齐次线性微分方程</h2><h2 id="欧拉（Euler）方程"><a href="#欧拉（Euler）方程" class="headerlink" title="欧拉（Euler）方程"></a>欧拉（Euler）方程</h2><h2 id="微分方程的简单应用"><a href="#微分方程的简单应用" class="headerlink" title="微分方程的简单应用"></a>微分方程的简单应用</h2>]]></content>
      
      
      <categories>
          
          <category> 考研 </category>
          
          <category> 数学 </category>
          
          <category> 高等数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 考研 </tag>
            
            <tag> 高等数学 </tag>
            
            <tag> 常微分方程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>六、多元函数积分学</title>
      <link href="/2021/10/06/1%20%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/6%20%E5%A4%9A%E5%85%83%E5%87%BD%E6%95%B0%E7%A7%AF%E5%88%86%E5%AD%A6/"/>
      <url>/2021/10/06/1%20%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/6%20%E5%A4%9A%E5%85%83%E5%87%BD%E6%95%B0%E7%A7%AF%E5%88%86%E5%AD%A6/</url>
      
        <content type="html"><![CDATA[<ol><li><input checked="" disabled="" type="checkbox"> 理解二重积分、三重积分的概念，了解重积分的性质，了解二重积分的中值定理.</li><li><input checked="" disabled="" type="checkbox"> 掌握二重积分的计算方法（直角坐标、极坐标），会计算三重积分（直角坐标柱面坐标、球面坐标）.</li><li><input checked="" disabled="" type="checkbox"> 理解两类曲线积分的概念，了解两类曲线积分的性质及两类曲线积分的关系.</li><li><input checked="" disabled="" type="checkbox"> 掌握计算两类曲线积分的方法.</li><li><input checked="" disabled="" type="checkbox"> 掌握格林公式并会运用平面曲线积分与路径无关的条件，会求二元函数全微分的原函数.</li><li><input checked="" disabled="" type="checkbox"> 了解两类曲面积分的概念、性质及两类曲面积分的关系，掌握计算两类曲面积分的方法，掌握用高斯公式计算曲面积分的方法，并会用斯托克斯公式计算曲线积分.</li><li><input checked="" disabled="" type="checkbox"> 了解散度与旋度的概念，并会计算.</li><li><input checked="" disabled="" type="checkbox"> 会用重积分、曲线积分及曲面积分求一些几何量与物理量（平面图形的面积、体积、曲面面积、弧长、质量、质心、形心、转动惯量、引力、功及流量等）.</li></ol><span id="more"></span><p>二重积分与三重积分的概念、性质、计算和应用 两类曲线积分的概念、性质及<br>计算 两类曲线积分的关系 格林（Green）公式 平面曲线积分与路径无关的条件<br>二元函数全微分的原函数 两类曲面积分的概念、性质及计算 两类曲面积分的关系<br>高斯（Gauss）公式 斯托克斯（Stokes）公式 散度、旋度的概念及计算 曲线积分<br>和曲面积分的应用</p>]]></content>
      
      
      <categories>
          
          <category> 考研 </category>
          
          <category> 数学 </category>
          
          <category> 高等数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 考研 </tag>
            
            <tag> 高等数学 </tag>
            
            <tag> 多元函数积分学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>五、多元函数微分学</title>
      <link href="/2021/10/06/1%20%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/5%20%E5%A4%9A%E5%85%83%E5%87%BD%E6%95%B0%E5%BE%AE%E5%88%86%E5%AD%A6/"/>
      <url>/2021/10/06/1%20%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/5%20%E5%A4%9A%E5%85%83%E5%87%BD%E6%95%B0%E5%BE%AE%E5%88%86%E5%AD%A6/</url>
      
        <content type="html"><![CDATA[<ol><li><input checked="" disabled="" type="checkbox"> 理解多元函数的概念，理解二元函数的几何意义.</li><li><input checked="" disabled="" type="checkbox"> 了解二元函数的极限与连续的概念以及有界闭区城上连续函数的性质.</li><li><input checked="" disabled="" type="checkbox"> 理解多元函数偏导数和全微分的概念，会求全微分，了解全微分存在的必要条件和充分条件，了解全微分形式的不变性.</li><li><input checked="" disabled="" type="checkbox"> 理解方向导数与梯度的概念，并掌握其计算方法.</li><li><input checked="" disabled="" type="checkbox"> 掌握多元复合函数一阶、二阶偏导数的求法.</li><li><input checked="" disabled="" type="checkbox"> 了解隐函数存在定理，会求多元隐函数的偏导数.</li><li><input checked="" disabled="" type="checkbox"> 了解空间曲线的切线和法平面及曲面的切平面和法线的概念，会求它们的方程.</li><li><input checked="" disabled="" type="checkbox"> 了解二元函数的二阶泰勒公式.</li><li><input checked="" disabled="" type="checkbox"> 理解多元函数极值和条件很值的概念，掌握多元函数极值存在的必要条件，了解二元函数极值存在的充分条件，会求二元函数的极值，会用拉格朗日乘数法求条件极值，会求简单多元函数的最大值和最小值，并会解决一些简单的应用问题.</li></ol><span id="more"></span><p>多元函数的概念 二元函数的几何意义 二元函数的极展与连续的概念 有界闭<br>区域上多元连续函数的性质 多元函数的偏导数和全微分 全微分存在的必要条件和<br>充分条件 多元复合函数、隐函数的求导法 二阶偏导数 方向导数和梯度 空间曲<br>线的切线和法平面 曲面的切平面和法线 二元函数的二阶泰勒公式 多元函数的极<br>值和条件极值 多元函数的最大值、最小值及其简单应用</p>]]></content>
      
      
      <categories>
          
          <category> 考研 </category>
          
          <category> 数学 </category>
          
          <category> 高等数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 考研 </tag>
            
            <tag> 高等数学 </tag>
            
            <tag> 多元函数微分学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>四、向量代数和空间解析几何</title>
      <link href="/2021/10/06/1%20%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/4%20%E5%90%91%E9%87%8F%E4%BB%A3%E6%95%B0%E5%92%8C%E7%A9%BA%E9%97%B4%E8%A7%A3%E6%9E%90%E5%87%A0%E4%BD%95/"/>
      <url>/2021/10/06/1%20%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/4%20%E5%90%91%E9%87%8F%E4%BB%A3%E6%95%B0%E5%92%8C%E7%A9%BA%E9%97%B4%E8%A7%A3%E6%9E%90%E5%87%A0%E4%BD%95/</url>
      
        <content type="html"><![CDATA[<!-- 1. [x] 理解空间直角坐标系，理解向量的概念及其表示. --><ol start="2"><li><input checked="" disabled="" type="checkbox"> 掌握向量的运算（线性运算、数量积、向量积、混合积），了解两个向量垂直、平行的条件.</li><li><input checked="" disabled="" type="checkbox"> 理解单位向量、方向数与方向余弦、向量的坐标表达式，掌握用坐标表达式进行向量运算的方法.</li><li><input checked="" disabled="" type="checkbox"> 掌握平面方程和直线方程及其求法.</li><li><input checked="" disabled="" type="checkbox"> 会求平面与平面、平面与直线、直线与直线之间的夹角，并会利用平面、直线的相互关系（平行、垂直、相交等）解决有关问题.<!-- 6. [x] 会求点到直线以及点到平面的距离. --></li><li><input checked="" disabled="" type="checkbox"> 了解曲面方程和空间曲线方程的概念.</li><li><input checked="" disabled="" type="checkbox"> 了解常用二次曲面的方程及其图形，会求简单的柱面和旋转曲面的方程.</li><li><input checked="" disabled="" type="checkbox"> 了解空间曲线的参数方程和一般方程.了解空间曲线在坐标平面上的投影，并会求该投影曲线的方程.</li></ol><span id="more"></span><p>向量的概念 向量的线性运算 向量的数量积和向量积 向量的混合积 两向量<br>垂直、平行的条件 两向量的夹角 向量的坐标表达式及其运算 单位向量 方向数<br>与方向余弦 曲面方程和空间曲线方程的概念 平面方程 直线方程 平面与平面、<br>平面与直线、直线与直线的夹角以及平行、垂直的条件 点到平面和点到直线的距离<br>球面 柱面 旋转曲面 常用的二次曲面方程及其图形 空间曲线的参数方程和一般<br>方程 空间曲线在坐标面上的投影曲线方程</p><h1 id="求夹角"><a href="#求夹角" class="headerlink" title="求夹角"></a>求夹角</h1><h1 id="根据与点、线、面的几何关系求面、线"><a href="#根据与点、线、面的几何关系求面、线" class="headerlink" title="根据与点、线、面的几何关系求面、线"></a>根据与点、线、面的几何关系求面、线</h1><ul><li>线面过点：点代入</li><li>面 // 线：$\vec n $⊥$l$</li><li>面⊥线：$\vec n$ // $l$</li><li>面 // 面：$\vec n$ // $\vec n_1$</li><li>面⊥面：$\vec n ×\vec n_1= \vec0$</li></ul><h1 id="求距离"><a href="#求距离" class="headerlink" title="求距离"></a>求距离</h1><ul><li>点到直线<br>取$l$上一点$M_0$，</li><li>点到面$d=\frac{|Ax_1+By_1+Cz_1+D|}{\sqrt{A^2+B^2+C^2}}$</li><li>线到面：线上取一点，计算点到面距离</li><li>面到面$d=\frac{|D_1-D_2|}{\sqrt{A^2+B^2+C^2}}$</li></ul>]]></content>
      
      
      <categories>
          
          <category> 考研 </category>
          
          <category> 数学 </category>
          
          <category> 高等数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 考研 </tag>
            
            <tag> 高等数学 </tag>
            
            <tag> 向量代数和空间解析几何 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三、一元函数积分学</title>
      <link href="/2021/10/06/1%20%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/3%20%E4%B8%80%E5%85%83%E5%87%BD%E6%95%B0%E7%A7%AF%E5%88%86%E5%AD%A6/"/>
      <url>/2021/10/06/1%20%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/3%20%E4%B8%80%E5%85%83%E5%87%BD%E6%95%B0%E7%A7%AF%E5%88%86%E5%AD%A6/</url>
      
        <content type="html"><![CDATA[<ol><li><input checked="" disabled="" type="checkbox"> 理解原函数的概念，理解不定积分和定积分的概念.</li><li><input checked="" disabled="" type="checkbox"> 掌握不定积分的基本公式，掌握不定积分和定积分的性质及定积分中值定理，掌握换元积分法与分部积分法.</li><li><input checked="" disabled="" type="checkbox"> 会求有理函数、三角函数有理式和简单无理函数的积分.</li><li><input checked="" disabled="" type="checkbox"> 理解积分上限的函数，会求它的导数，掌握牛顿一莱布尼茨公式.</li><li><input checked="" disabled="" type="checkbox"> 理解反常积分的概念，了解反常积分收敛的比较判别法，会计算反常积分.</li><li><input checked="" disabled="" type="checkbox"> 掌握用定积分表达和计算一些几何量与物理量（平面图形的面积、平面曲线的弧长、旋转体的体积及侧面积、平行截面面积为已知的立体体积、功、引力、压力、质心、形心等）及函数的平均值</li></ol><span id="more"></span><p>原函数和不定积分的概念 不定积分的基本性质 基本积分公式 定积分的概念<br>和基本性质 定积分中值定理 积分上限的函数及其导数 牛顿-莱布尼茨<br>（Newton-Leibniz）公式 不定积分和定积分的换元积分法与分部积分法 有理函数、<br>三角函数有理式和简单无理函数的积分 反常（广义）积分 定积分的应用</p>]]></content>
      
      
      <categories>
          
          <category> 考研 </category>
          
          <category> 数学 </category>
          
          <category> 高等数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 考研 </tag>
            
            <tag> 高等数学 </tag>
            
            <tag> 一元函数积分学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二、一元函数微分学</title>
      <link href="/2021/10/05/1%20%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/2%20%E4%B8%80%E5%85%83%E5%87%BD%E6%95%B0%E5%BE%AE%E5%88%86%E5%AD%A6/"/>
      <url>/2021/10/05/1%20%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/2%20%E4%B8%80%E5%85%83%E5%87%BD%E6%95%B0%E5%BE%AE%E5%88%86%E5%AD%A6/</url>
      
        <content type="html"><![CDATA[<ol><li><input checked="" disabled="" type="checkbox"> 理解导数和微分的概念，理解导数与微分的关系，理解导数的几何意义，会求平面曲线的切线方程和法线方程，了解导数的物理意义，会用导数描述一些物理量，理解函数的可导性与连续性之间的关系.</li><li><input checked="" disabled="" type="checkbox"> 掌握导数的四则运算法则和复合函数的求导法则，掌握基本初等函数的导数公式.了解微分的四则运算法则和一阶微分形式的不变性，会求函数的微分.</li><li><input checked="" disabled="" type="checkbox"> 了解高阶导数的概念，会求简单函数的高阶导数.</li><li><input checked="" disabled="" type="checkbox"> 会求分段函数的导数，会求隐函数和由参数方程所确定的函数以及反函数的导数.</li><li><input checked="" disabled="" type="checkbox"> 理解并会用罗尔（Rolle）定理、拉格朗日（Lagrange）中值定理和泰勒（Taylor）定理，了解并会用柯西（Cauchy）中值定理.</li><li><input checked="" disabled="" type="checkbox"> 掌握用洛必达法则求未定式极限的方法.</li><li><input checked="" disabled="" type="checkbox"> 理解函数的极值概念，掌握用导数判断函数的单调性和求函数极值的方法，掌握函数最大值和最小值的求法及其应用.</li><li><input checked="" disabled="" type="checkbox"> 会用导数判断函数图形的凹凸性（注：在区间$(a,b)$内，设函数$ f (x) $具有二阶导数.当 $f”(x) &gt; 0$ 时，$f (x)$ 的图形是凹的；当 $f”(x) &lt; 0$ 时， $f (x)$ 的图形是凸的），会求函数图形的拐点以及水平、铅直和斜渐近线，会描绘函数的图形.</li><li><input checked="" disabled="" type="checkbox"> 了解曲率、曲率圆与曲率半径的概念，会计算曲率和曲率半径.</li></ol><span id="more"></span><p>导数和微分的概念 导数的几何意义和物理意义 函数的可导性与连续性之间的<br>关系 平面曲线的切线和法线 导数和微分的四则运算 基本初等函数的导数 复合<br>函数、反函数、隐函数以及参数方程所确定的函数的微分法 高阶导数 一阶微分形<br>式的不变性 微分中值定理 洛必达（L’Hospital）法则 函数单调性的判别 函数<br>的极值 函数图形的凹凸性、拐点及渐近线 函数图形的描绘 函数的最大值与最小<br>值 弧微分 曲率的概念 曲率圆与曲率</p>]]></content>
      
      
      <categories>
          
          <category> 考研 </category>
          
          <category> 数学 </category>
          
          <category> 高等数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 考研 </tag>
            
            <tag> 高等数学 </tag>
            
            <tag> 一元函数微分学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一、函数、极限、连续</title>
      <link href="/2021/10/05/1%20%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/1%20%E5%87%BD%E6%95%B0%E3%80%81%E6%9E%81%E9%99%90%E3%80%81%E8%BF%9E%E7%BB%AD/"/>
      <url>/2021/10/05/1%20%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/1%20%E5%87%BD%E6%95%B0%E3%80%81%E6%9E%81%E9%99%90%E3%80%81%E8%BF%9E%E7%BB%AD/</url>
      
        <content type="html"><![CDATA[<ol><li><input checked="" disabled="" type="checkbox"> 理解函数的概念，掌握函数的表示法，会建立应用问题的函数关系.</li><li><input checked="" disabled="" type="checkbox"> 了解函数的有界性、单调性、周期性和奇偶性.</li><li><input checked="" disabled="" type="checkbox"> 理解复合函数及分段函数的概念，了解反函数及隐函数的概念.</li><li><input checked="" disabled="" type="checkbox"> 掌握基本初等函数的性质及其图形，了解初等函数的概念.</li><li><input checked="" disabled="" type="checkbox"> 理解极限的概念，理解函数左极限与右极限的概念以及函数极限存在与左极限右极限之间的关系.</li><li><input checked="" disabled="" type="checkbox"> 掌握极限的性质及四则运算法则.</li><li><input checked="" disabled="" type="checkbox"> 掌握极限存在的两个准则，并会利用它们求极限，掌握利用两个重要极限求极限的方法.</li><li><input checked="" disabled="" type="checkbox"> 理解无穷小量、无穷大量的概念，掌握无穷小量的比较方法，会用等价无穷小量求极限.</li><li><input checked="" disabled="" type="checkbox"> 理解函数连续性的概念（含左连续与右连续），会判别函数间断点的类型.</li><li><input checked="" disabled="" type="checkbox"> 了解连续函数的性质和初等函数的连续性，理解闭区间上连续函数的性质（有界性、最大值和最小值定理、介值定理），并会应用这些性质.</li></ol><span id="more"></span><p>函数的概念及表示法<br>函数的有界性、单调性、周期性和奇偶性<br>复合函数、反函数、分段函数和隐函数<br>基本初等函数的性质及其图形<br>初等函数<br>函数关系的建立<br>数列极限与函数极限的定义及其性质<br>函数的左极限和右极限<br>无穷小量和无穷大量的概念及其关系<br>无穷小量的性质及无穷小量的比较<br>极限的四则运算<br>极限存在的两个准则：单调有界准则和夹逼准则<br>两个重要极限：</p><img src="https://www.zhihu.com/equation?tex=%5Clim_%7B%5CBox+%5Cto+0%7D+%5Cfrac%7B+%5Csin+%5CBox%7D%7B%5CBox%7D+%3D+1" alt="[公式]" eeimg="1" data-formula="\lim_{\Box \to 0} \frac{ \sin \Box}{\Box} = 1"><img src="https://www.zhihu.com/equation?tex=%5Clim_%7B%5CBox+%5Cto+%5Cinfty%7D+%5CBig%28+1%2B+%5Cfrac%7B1%7D%7B%5CBox%7D+%5CBig%29%5E+%5CBox+%3D+e" alt="[公式]" eeimg="1" data-formula="\lim_{\Box \to \infty} \Big( 1+ \frac{1}{\Box} \Big)^ \Box = e"><p>函数连续的概念<br>函数同断点的类型<br>初等函数的连续性<br>闭区间上连续函数</p><p>$a&gt;1,\lim_{n \to \infin} \sqrt[n]{a}=1$</p><p>$\lim_{n\to \infin } \sqrt[n]{n}=1 $ </p>]]></content>
      
      
      <categories>
          
          <category> 考研 </category>
          
          <category> 数学 </category>
          
          <category> 高等数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 考研 </tag>
            
            <tag> 高等数学 </tag>
            
            <tag> 函数、极限、连续 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>七、无穷级数</title>
      <link href="/2021/10/05/1%20%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/7%20%E6%97%A0%E7%A9%B7%E7%BA%A7%E6%95%B0/"/>
      <url>/2021/10/05/1%20%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/7%20%E6%97%A0%E7%A9%B7%E7%BA%A7%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<!--  --><!-- 1. 级数敛散性判断2. 求幂级数收敛域、收敛半径、收敛区间3. 求幂级数的$S(x)$4. 求数项级数之和 --><!-- 1. [x] 理解常数项级数收敛、发散以及收敛级数的和的概念，掌握级数的基本性质及收敛的必要条件. --><!-- 2. [x] 掌握几何级数与 p 级数的收敛与发散的条件. --><!-- 3. [x] 掌握正项级数收敛性的比较判别法、比值判别法、根值判别法，会用积分判别法. --><!-- 4. [x] 掌握交错级数的莱布尼茨判别法. --><!-- 5. [x] 了解任意项级数绝对收敛与条件收敛的概念以及绝对收敛与收敛的关系. --><!-- 6. [x] 了解函数项级数的收敛域及和函数的概念. --><!-- 7. [x] 理解幂级数收敛半径的概念，并掌握幂级数的收敛半径、收敛区间及收敛域的求法. --><ol start="8"><li><input checked="" disabled="" type="checkbox"> 了解幂级数在其收敛区间内的基本性质（和函数的连续性、逐项求导和逐项积分），会求一些幂级数在收敛区间内的和函数，并会由此求出某些数项级数的和.</li><li><input checked="" disabled="" type="checkbox"> 了解函数展开为泰勒级数的充分必要条件.<!-- 10. [x] 掌握$e^x ,sinx ,cosx ,ln(1 +x)$ 及$(1 +x)^\alpha $的麦克劳林（Maclaurin）展开式，会用它们将一些简单函数间接展开为幂级数. --></li><li><input checked="" disabled="" type="checkbox"> 了解傅里叶级数的概念和狄利克雷收敛定理，会将定义在$[-l,l]$上的函数展开为傅里叶级数，会将定义在$[0,l]$上的函数展开为正弦级数与余弦级数，会写出傅里叶级数的和函数的表达式</li></ol><span id="more"></span><!-- 常数项级数的收敛与发散的概念 --><!-- 收敛级数的和的概念  --><!-- 级数的基本性质与收敛的必要条件 --><!-- 几何级数数与 p 级数及其收敛性 --><!-- 正项级数收敛性的判别法 --><!-- 交错级数与莱布尼茨定理 --><!-- 任意项级数的绝对收敛与条件收敛 --><p>函数项级数的收敛与和函数的概念</p><!-- 幂级数及其收敛、收敛区间（指开区间）和收敛域 --><!-- 幂级数的和函数 --><p>幂级数在其收敛区间内的基本性质<br>简单幂级数的和函数的求法<br>初等函数的幂级数展开式<br>函数的傅里叶（Fourier）系数与傅里叶级数<br>狄利克雷（Dirichlet）定理<br>函数在$[-l,l]$上的傅里叶级数<br>函数在$[0,l]$上的正弦级数和余弦级数</p><h1 id="级数敛散性判断（证明收敛-发散）"><a href="#级数敛散性判断（证明收敛-发散）" class="headerlink" title="级数敛散性判断（证明收敛/发散）"></a>级数敛散性判断（证明收敛/发散）</h1><p>注：</p><ol><li>$n \rightarrow \infty$ 和 $n=0,1,2,…$ 不同。如$\sum \frac 1 n$发散，</li><li>$$</li></ol><h2 id="数项级数"><a href="#数项级数" class="headerlink" title="数项级数"></a>数项级数</h2><ol><li>直接计算$\sum$，若算的出来说明收敛</li><li>两个重要级数<ol><li>$\sum \frac1{n^p}$<ul><li>$p&gt;1$收敛</li><li>$p \le 1$发散</li></ul></li><li>$\sum a q^n$<ul><li>$|q|&lt;1$收敛</li><li>$|q| \ge 1$发散</li></ul></li></ol></li><li>不满足级数收敛的必要条件（$\lim\limits_{n\rightarrow\infty} a_n = 0$），说明发散</li></ol><!-- $\lim\limits_{\substack{\sigma\rightarrow0 \\\tau_0\rightarrow0}}\frac{\sigma}{\tau_0} $$\lim\limits_{\substack{\sigma\rightarrow0 \\\tau_0\rightarrow0}}\frac{\sigma}{\tau_0} $ --><h2 id="正项级数"><a href="#正项级数" class="headerlink" title="正项级数"></a>正项级数</h2><h3 id="比较法"><a href="#比较法" class="headerlink" title="比较法"></a>比较法</h3><ol><li>$\lim\limits_{n\rightarrow\infty} \frac{u_n}{v_n} = l$，则$u_n$和$v_n$敛散性相同<ul><li>注意等价无穷小 如$sin \frac 1 {n^\alpha}  $<del>$\frac 1 {n^\alpha}  $，$(e^{\frac 1 n}-1)$</del>$\frac 1 n$</li></ul></li><li>≤敛则敛，≥散则散</li></ol><h3 id="比值法、根值法"><a href="#比值法、根值法" class="headerlink" title="比值法、根值法"></a>比值法、根值法</h3><ol><li>$\lim\limits_{n\rightarrow\infty} \frac{a_{n+1}}{a_n}$</li><li>$\lim\limits_{n\rightarrow\infty} \sqrt[n]{a_n}$</li></ol><h3 id="积分法"><a href="#积分法" class="headerlink" title="积分法"></a>积分法</h3><p>令$\lim\limits_{n\rightarrow\infty}  a_n = f(n)$，$a_n &gt; 0$，且${a_n} \downarrow$，有：</p><p>$\lim\limits_{n\rightarrow\infty}  a_n$ 收敛 $\Leftrightarrow$ $ \int_1^{+ \infty} f(n)$收敛</p><h2 id="交错级数"><a href="#交错级数" class="headerlink" title="交错级数"></a>交错级数</h2><p>莱布尼茨判别法：<br>${|a_n|} \downarrow$ 且 $\lim\limits_{n \rightarrow \infty} a_n = 0$ ，则敛，且$S&lt;a_1$</p><h2 id="不知正负的级数"><a href="#不知正负的级数" class="headerlink" title="不知正负的级数"></a>不知正负的级数</h2><p>先加绝对值，判断是不是绝对收敛</p><h2 id="其他无规律的级数"><a href="#其他无规律的级数" class="headerlink" title="其他无规律的级数"></a>其他无规律的级数</h2><p>尝试拆成多项，分别证明每项收敛</p><h1 id="求幂级数-sum-n-0-infty-a-n-x-n-收敛半径、收敛区间、收敛域"><a href="#求幂级数-sum-n-0-infty-a-n-x-n-收敛半径、收敛区间、收敛域" class="headerlink" title="求幂级数$\sum_{n=0}^{\infty}  a_n x^n$收敛半径、收敛区间、收敛域"></a>求幂级数$\sum_{n=0}^{\infty}  a_n x^n$收敛半径、收敛区间、收敛域</h1><p>阿贝尔定理</p><h2 id="收敛半径R"><a href="#收敛半径R" class="headerlink" title="收敛半径R"></a>收敛半径R</h2><ol><li>$\rho = \lim\limits_{n\rightarrow\infty} |\frac{a_{n+1}}{a_n}|=\lim\limits_{n\rightarrow\infty} \sqrt[n]{|a_n|}$</li><li>$R= \frac1\rho$</li></ol><h2 id="收敛区间"><a href="#收敛区间" class="headerlink" title="收敛区间"></a>收敛区间</h2><p>$(-R,R)$</p><p>注：$(-R,R)$里的都是绝对收敛，$\pm R$ 处可能条件收敛，但条件收敛也是收敛</p><h2 id="收敛域"><a href="#收敛域" class="headerlink" title="收敛域"></a>收敛域</h2><p>$(-R,R)$加$R$和$-R$的判别</p><p>性质：</p><ol><li>$\sum (a_n+b_n)$的收敛域和收敛区间是$\sum a_n$的和$\sum b_n$的交集</li><li>幂级数进行有限次求导、积分不改变$(-R,R)$的敛散性，但可能改变$\pm R$ 处的</li><li>对$\sum_{n=0}^{\infty}  a_n (x-x_0)^n$收敛半径、收敛区间、收敛域对应加$x_0$</li></ol><h1 id="求幂级数的-S-x"><a href="#求幂级数的-S-x" class="headerlink" title="求幂级数的$S(x)$"></a>求幂级数的$S(x)$</h1><h2 id="通过逐项求导、逐项求积化为典型的幂级数"><a href="#通过逐项求导、逐项求积化为典型的幂级数" class="headerlink" title="通过逐项求导、逐项求积化为典型的幂级数"></a>通过逐项求导、逐项求积化为典型的幂级数</h2><ol><li>$\sum P(n) x^n$型：<ul><li>$\sum x^n = \frac 1 {1-x}$</li><li>$\sum (-1)^n x^n = \frac 1 {1+x}$</li></ul></li><li>$\sum \frac {x^n} {P(n)}$型：<ul><li>$\sum \frac {x^n} n = -ln(1-x)$</li><li>$\sum \frac {(-x)^n} n = -ln(1+x)$</li><li>灭分母</li></ul></li><li>$\sum \frac {x^n} !$型：<ul><li>$\sum \frac {x^n} {n!} = e^x$</li><li>$\sum \frac {(-1)^nx^{2n+1}} {2n+1!} = sinx$</li><li>$\sum \frac {(-1)^nx^{2n}} {2n!} = cosx$</li><li>微分方程</li></ul></li></ol><h1 id="求数项级数之和"><a href="#求数项级数之和" class="headerlink" title="求数项级数之和"></a>求数项级数之和</h1><p>构造成幂级数</p><h1 id="展开为幂级数"><a href="#展开为幂级数" class="headerlink" title="展开为幂级数"></a>展开为幂级数</h1><ol><li>泰勒公式直接展开<br>$$ f(x) = \sum_{n=0}^{\infty}  \frac{f^{(n)}(x_0}{n!}(x-x_0)^n+R_n(x) $$</li></ol><p>注：函数展开成泰勒级数的充要条件：$\lim\limits_{n\rightarrow\infty} R_n(x)=0$</p><ol start="2"><li>通过逐项求导、逐项求积化为7种</li></ol><h1 id="傅里叶级数"><a href="#傅里叶级数" class="headerlink" title="傅里叶级数"></a>傅里叶级数</h1><h2 id="狄里克雷收敛定理"><a href="#狄里克雷收敛定理" class="headerlink" title="狄里克雷收敛定理"></a>狄里克雷收敛定理</h2><p>在$f(x)$的连续点$x$处，级数收敛到$f(x)$； 在$f(x)$的间断点$x$处，级数收敛到$(f(x+0)+f(x-0))/2$， 即$f(x)$在间断点处的左右极限的平均值；</p><h2 id="函数在-l-l-上的傅里叶级数"><a href="#函数在-l-l-上的傅里叶级数" class="headerlink" title="函数在$[-l,l]$上的傅里叶级数"></a>函数在$[-l,l]$上的傅里叶级数</h2><p>$$a_n=\frac1l\int_{-l}^l f(x)cos\frac{n \pi}l x dx$$</p><p>$$b_n=\frac1l\int_{-l}^l f(x)sin\frac{n \pi}l x dx$$</p><p>$$f(x)=\frac{a_0}2 + \sum_{n=0}^{\infty} a_n cos\frac{n \pi}l x +  b_nsin\frac{n \pi}l x$$</p><h2 id="函数在-0-l-上的正弦级数和余弦级数"><a href="#函数在-0-l-上的正弦级数和余弦级数" class="headerlink" title="函数在$[0,l]$上的正弦级数和余弦级数"></a>函数在$[0,l]$上的正弦级数和余弦级数</h2><p>正弦函数：奇延拓<br>余弦函数：偶延拓</p>]]></content>
      
      
      <categories>
          
          <category> 考研 </category>
          
          <category> 数学 </category>
          
          <category> 高等数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 考研 </tag>
            
            <tag> 高等数学 </tag>
            
            <tag> 级数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2022腿姐考研政治技巧班课程笔记</title>
      <link href="/2021/10/03/%E6%94%BF%E6%B2%BB/2022%E8%85%BF%E5%A7%90%E8%80%83%E7%A0%94%E6%94%BF%E6%B2%BB%E6%8A%80%E5%B7%A7%E7%8F%AD%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/"/>
      <url>/2021/10/03/%E6%94%BF%E6%B2%BB/2022%E8%85%BF%E5%A7%90%E8%80%83%E7%A0%94%E6%94%BF%E6%B2%BB%E6%8A%80%E5%B7%A7%E7%8F%AD%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>马哲选择题的keywords和知识点</p><span id="more"></span><h1 id="马原"><a href="#马原" class="headerlink" title="马原"></a>马原</h1><ol><li>单选4*1：1<del>2题哲学；3</del>4题政经（4题也可能是科社）</li><li>多选5*2：17-18题哲学；19-20题政经；21题科社<ul><li>哲学：灵活性</li><li>政经：运用方法去分析资本主义制度</li><li>科社：未来的目标</li></ul></li><li>分析题1*10：3、4题哲学（10分）</li><li>出题方式：<ul><li>🔺概念辨析理解（包括材料理解)</li><li>🔺keywords(包括超纲）</li><li>“帽子”（考察较少）</li></ul></li></ol><h2 id="马哲选择题"><a href="#马哲选择题" class="headerlink" title="马哲选择题"></a>马哲选择题</h2><h3 id="keywords"><a href="#keywords" class="headerlink" title="keywords"></a>keywords</h3><ol><li>第一梯队keywords：根本、决定、核心、最 对应 人民、实践、规律、物质生产<ul><li>人民：人的解放学说</li><li>实践：区别于其他任何哲学的关键，相当于马克思主义的一个tag</li><li>规律：规律很多时候在讲矛盾。没有规律选矛盾也可<ul><li>历史规律：两大矛盾运动</li><li>矛盾（对立统一规律）核心</li></ul></li><li>物质生产：<ul><li>生产力与生产关系</li><li>经济基础与上层建筑的关系</li></ul></li></ul></li></ol><p>两个出题陷阱：<br>❌物质运动的时空的存在与发展取决于人们的认识水平<br>❌外在世界的发展取决于人们的主体选择</p><h3 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h3><ol><li>实践 = 想法 + 物质性活动</li><li>实践的结构：主体—中介—客体<ul><li>实践的主客体只有通过中介才能起作用</li></ul></li><li>实践的特征（单选题、材料说明题）<ul><li>直接现实性：实践高于认识的地方，强调去做</li><li>自觉能动性：强调目的、计划</li><li>社会历史性：强调会变化</li></ul></li><li>实践的形式<ul><li>物质生产</li><li>社会政治</li><li>科学文化</li></ul></li><li>实践是让自然界和人类社会分化与统一的基础， （桥梁）</li><li>实践是认识的基础<ul><li>实践是认识的来源、动力、标准、目的</li><li>关于来源<ul><li>一般来说，直接经验==实践</li><li>直接经验和间接经验里：相互转化、相互决定、谁更重要都错</li><li>来自于≠来源。人的多数认识来自于间接经验</li></ul></li></ul></li></ol><h3 id="常见错误选项"><a href="#常见错误选项" class="headerlink" title="常见错误选项"></a>常见错误选项</h3><ol><li>❌“比”、“更重要”：哲学概念不存在谁更重要<ul><li>⭕除了认识的第二次飞跃比第一次飞跃更重要</li></ul></li><li>❌自由理性、普世价值：这个是资产阶级意识形态</li><li>❌矛盾可以调和    ⭕矛盾可以解决(但其实解决的是矛盾的某个形式）</li><li>❌改造、创造规律：规律是客观的<ul><li>⭕改造创造规律作用的方式</li></ul></li><li>❌“生理机能”、“由人的意志决定”、“观念形式”、“随心所欲”等唯心主义观点；“主观性”的概念不存在：唯心主义观点是错的<!-- 6. ❌资本主义灭亡/社会主义胜利等的具体途径、现成道路  * ⭕现实道路(讲可行性，非空想） --><!-- 7. ❌直观反映    ⭕能动 --><!-- 8. ❌发展是造环往复的、是线性的    ⭕发展是螺旋式上升的 --></li><li>❌人人创造历史    ⭕人们、人民创造历史</li><li>❌感性认识是不可靠的    ⭕感性认识是有局限的</li></ol><h3 id="绝对但正确的表述"><a href="#绝对但正确的表述" class="headerlink" title="绝对但正确的表述"></a>绝对但正确的表述</h3><ol><li>⭕不包含差异的同一是不存在的</li><li>⭕现象一定表现本质，本质只能通过<strong>理性思維</strong>才能把握<!-- 3. ⭕任何历史人物都不能决定和改变社会历史发展的总进程和总方向(历史规律) --><!-- 4. ⭕人的本质是一切社会关系的总和 --></li><li>⭕一切事物都是作为<strong>过程</strong>而存在：任何人和任何事物都是一个过程</li><li>⭕现存的都是应当灭亡的</li></ol><h3 id="派别判断—基于哲学基本问题的的变形"><a href="#派别判断—基于哲学基本问题的的变形" class="headerlink" title="派别判断—基于哲学基本问题的的变形"></a>派别判断—基于哲学基本问题的的变形</h3><p>物质统一性—多样性的统一</p><!-- 物质理解为一个范畴， 一种概括抽象 --><p>任何事物都具有无限多样的属性</p><!-- 这个原理在考试中出现肯定是对的 --><p>⭕D. 任何事物都具有无限多样的属性（ 物质是多样性统一的原理）</p><h3 id="马克思主义关于“-人”-的考察"><a href="#马克思主义关于“-人”-的考察" class="headerlink" title="马克思主义关于“ 人” 的考察"></a>马克思主义关于“ 人” 的考察</h3><ol><li>实践主体、认识主体：⭕能动的人    ❌所有人/自然人<!-- 2. 唯物史观与唯心史观的对立：在历史创造者/历史主体问题上表现为群众史观与英雄史观的对立 --><!-- 3. 唯物史观与唯心史观的根本分歧：是否承认社会存在决定社会意识 --><!-- 3. 人民群众：社会历史的主体，历史的创造者，对历史发展起决定性作用 --></li><li>人民群众的“决定”与“创造”历史：<!-- 与规律一致，受规律、一定的社会历史条件制约。经济条件对于人民群众创造历史的活动有着首要的、决定性的影响。并不是随心所欲地创造，并不是在他们自己选定的条件下创造，而是在直接碰到的、既定的，从过去承继下来的条件下创造。 --><ol><li>从质上看，人民群众是指一切对社会历史发展起推动作用的人每一个人都影响历史，历史发展是每一个人合力作用的结果有人是正力”,有人是反力”。</li><li>从量上看，人民群众是指社会人口中的绝大多数。人民群众的总体意愿和行动代表了历史发展的方向，人民群众的社会实践最终决定历史发展的结局(人民群众特定时期包括剥削阶级）</li></ol></li><li>个人：合力，影响，起作用<ol><li>作用大的：历史人物英雄领袖</li><li>作用小的：普通个人</li></ol></li></ol><!-- 历史人物是中性词，杰出人物/英雄人物/领袖是历史人物中的正面词。历史人物对历史发展有深刻影响，甚至有时能够决定个别历史事件的结局，在历史发展进程中，新的历史任务往往是由具有进步意义的历史人物首先发现或提出来的。不管什么样的历史人物，在历史上发挥什么样的作用，都要受到社会发展客观规律的制约，而不能决定和改变历史发展的总进程和总方向。（要用历史分析法和阶级分析法评价看待历史人物） --><p>❌ 历史人物往往能首先或提出新的历史任务（⭕ 具有进步意义的历史人物）</p><p>❌ 社会发展是由多种力量最终决定的 （⭕ 由规律）</p><h3 id="马克思主义的创立、-属性与贡献"><a href="#马克思主义的创立、-属性与贡献" class="headerlink" title="马克思主义的创立、 属性与贡献"></a>马克思主义的创立、 属性与贡献</h3>]]></content>
      
      
      <categories>
          
          <category> 考研 </category>
          
          <category> 政治 </category>
          
          <category> 马原 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 考研 </tag>
            
            <tag> 马原 </tag>
            
            <tag> 腿姐 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>应用层</title>
      <link href="/2021/10/03/3%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/5%20%E5%BA%94%E7%94%A8%E5%B1%82/"/>
      <url>/2021/10/03/3%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/5%20%E5%BA%94%E7%94%A8%E5%B1%82/</url>
      
        <content type="html"><![CDATA[<p>（一）网络应用模型</p><ol><li>客户/服务器模型</li><li>P2P模型</li></ol><p>（二）✨DNS系统</p><ol><li>层次域名空间</li><li>域名服务器</li><li>域名解析过程</li></ol><p>（三）FTP</p><ol><li>FTP协议的工作原理</li><li>控制连接与数据连接</li></ol><p>（四）✨电子邮件</p><ol><li>电子邮件系统的组成结构</li><li>电子邮件格式与MIME</li><li>SMTP协议与POP3协议</li></ol><p>（五）✨WWW</p><ol><li>WWW的槪念与组成结构</li><li>HTTP协议</li></ol><span id="more"></span><h1 id="客户-服务器模型和P2P模型的区别"><a href="#客户-服务器模型和P2P模型的区别" class="headerlink" title="客户/服务器模型和P2P模型的区别"></a>客户/服务器模型和P2P模型的区别</h1><p>一个是纯服务器、客户机，一个既可以做服务器又可以是客户机</p><h1 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h1><ul><li>根域名服务器</li><li>顶级域名服务器</li><li>授权域名服务器</li><li>本地域名服务器</li></ul><h2 id="域名解析过程"><a href="#域名解析过程" class="headerlink" title="域名解析过程"></a>域名解析过程</h2><p>主机向本地域名服务器的查询采用的是递归查询</p><p>本地域名服务器向根域名服务器的查询采用迭代查询</p><h1 id="FTP的控制连接（21）与数据连接（20）"><a href="#FTP的控制连接（21）与数据连接（20）" class="headerlink" title="FTP的控制连接（21）与数据连接（20）"></a>FTP的控制连接（21）与数据连接（20）</h1><h1 id="电子邮件"><a href="#电子邮件" class="headerlink" title="电子邮件"></a>电子邮件</h1><h2 id="MIME"><a href="#MIME" class="headerlink" title="MIME"></a>MIME</h2><p>本来邮件只能发ASCII码，有了MIME就可以支持多媒体了</p><h2 id="SMTP"><a href="#SMTP" class="headerlink" title="SMTP"></a>SMTP</h2><p>发送方把邮件发送给发送方邮件服务器时使用</p><h2 id="POP3"><a href="#POP3" class="headerlink" title="POP3"></a>POP3</h2><p>接收方读取邮件时使用</p><p>读取邮件也可能用IMAP协议</p><p>如果是在网页收发邮件也可能是HTTP协议</p><h1 id="WWW万维网"><a href="#WWW万维网" class="headerlink" title="WWW万维网"></a>WWW万维网</h1><h2 id="URL-HTTP-HTML"><a href="#URL-HTTP-HTML" class="headerlink" title="URL HTTP HTML"></a>URL HTTP HTML</h2><h2 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h2>]]></content>
      
      
      <categories>
          
          <category> 考研 </category>
          
          <category> 408 </category>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 考研 </tag>
            
            <tag> 计算机网络 </tag>
            
            <tag> 408 </tag>
            
            <tag> 应用层 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>传输层</title>
      <link href="/2021/10/03/3%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/4%20%E4%BC%A0%E8%BE%93%E5%B1%82/"/>
      <url>/2021/10/03/3%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/4%20%E4%BC%A0%E8%BE%93%E5%B1%82/</url>
      
        <content type="html"><![CDATA[<p>（一）传输层提供的服务</p><ol><li>传输层的功能</li><li>传输层寻址与端口</li><li>无连接服务与面向连接服务</li></ol><p>（二）UDP协议（不重要）</p><ol><li>UDP数据报</li><li>UDP校验</li></ol><p>（三）✨✨✨TCP协议</p><ol><li>✨TCP报文段</li><li>✨✨TCP连接管理：三次握手、四次挥手、seq ack ACK FIN SYN</li><li>TCP可靠传输</li><li>✨✨TCP流量控制与拥塞控制</li></ol><span id="more"></span><h1 id="传输层寻址与端口"><a href="#传输层寻址与端口" class="headerlink" title="传输层寻址与端口"></a>传输层寻址与端口</h1><p>套接字:{IP地址，端口号}</p><p>从传输层开始是面向进程的</p><h1 id="TCP可靠传输"><a href="#TCP可靠传输" class="headerlink" title="TCP可靠传输"></a>TCP可靠传输</h1><p>考发了几个报文段后确认序号和序号分别是多少</p><h1 id="拥塞控制"><a href="#拥塞控制" class="headerlink" title="拥塞控制"></a>拥塞控制</h1><p>拥塞控制：全局性的<br>流量控制：只控制发送方</p><h2 id="慢开始-拥塞避免"><a href="#慢开始-拥塞避免" class="headerlink" title="慢开始+拥塞避免"></a>慢开始+拥塞避免</h2><p>慢开始：刚开始发送窗口cwnd是一个报文段（MSS最大报文段长度）</p><p>每传输一次（传输轮次、往返时延RTT），cwnd*=2</p><p>拥塞避免：cwnd&gt;ssthresh（慢开始门限）后，cwnd+=1；<br>每出现一次拥塞，ssthresh=cwnd/2</p><pre><code>1 2 4 8 16 17 18 19 20 拥塞，ssthresh=10 1 2 4 8 10 11 12 13 ...|-慢开始-||-拥塞避免-|                   |-慢开始-||-拥塞避免-|</code></pre><h2 id="快重传-快恢复"><a href="#快重传-快恢复" class="headerlink" title="快重传+快恢复"></a>快重传+快恢复</h2><p>快重传：发送方连续收到三个重复的ack 直接重传</p><p>A给B发了1234，B收到了134，返回的ack为222，A接收后立即重传2，不必等待超时重传计时器</p><p>快恢复：发生拥塞后</p>]]></content>
      
      
      <categories>
          
          <category> 考研 </category>
          
          <category> 408 </category>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 考研 </tag>
            
            <tag> 计算机网络 </tag>
            
            <tag> 408 </tag>
            
            <tag> 传输层 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络层</title>
      <link href="/2021/10/03/3%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/3%20%E7%BD%91%E7%BB%9C%E5%B1%82/"/>
      <url>/2021/10/03/3%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/3%20%E7%BD%91%E7%BB%9C%E5%B1%82/</url>
      
        <content type="html"><![CDATA[<p>（一）网络层的功能</p><ol><li>异构网络互联</li><li>路由与转发<!-- 3. 拥塞控制 --><!-- 具体的不考 --></li><li>SDN基本概念</li></ol><p>（二）路由算法</p><ol><li>静态路由与动态路由</li><li>距离-向量路由算法</li><li>链路状态路由算法</li><li>层次路由</li></ol><p>（三）IPv4 （32bit）</p><ol><li>✨IPv4分组</li><li>✨✨IPv4地址与NAT</li><li>✨✨子网划分、路由聚集、子网掩码与CIDR</li><li>ARP协议、DHCP协议与ICMP协议</li></ol><p>（四）IPv6 （128bit）</p><ol><li>IPv6的主要特点</li><li>IPv6地址</li></ol><p>（五）路由协议</p><ol><li>自治系统</li><li>域内路由与域间路由</li><li>✨RIP路由协议</li><li>✨OSPF路由协议</li><li>✨BGP路由协议</li></ol><p>（六）IP组播</p><ol><li>组播的概念</li><li>IP组播地址</li></ol><p>（七）移动IP</p><ol><li>移动IP的概念</li><li>移动IP通信过程</li></ol><p>（八）网络层设备</p><ol><li>路由器的组成和功能</li><li>路由表与路由转发</li></ol><span id="more"></span><h1 id="路由算法"><a href="#路由算法" class="headerlink" title="路由算法"></a>路由算法</h1><h2 id="距离-向量路由算法"><a href="#距离-向量路由算法" class="headerlink" title="距离-向量路由算法"></a>距离-向量路由算法</h2><p>所有结点<br>定期<br>传送<br>整个路由选择表<br>给<br>所有与之直接相邻的结点</p><h2 id="链路状态路由算法"><a href="#链路状态路由算法" class="headerlink" title="链路状态路由算法"></a>链路状态路由算法</h2><p>每个结点<br>有<br>完全的网络拓扑信息<br>主动测试所有邻接结点的状态<br>定期<br>将链路状态<br>传播给<br>所有其他结点 （ 或称路由结点 ）</p><h2 id="层次路由"><a href="#层次路由" class="headerlink" title="层次路由"></a>层次路由</h2><p>将互联网分为很多小的自治系统<br>每个系统内部可以选择自己喜欢的协议（内部网关协议IGP）<br>自治系统间需要统一（外部网关协议EGP  ）</p><h1 id="路由协议"><a href="#路由协议" class="headerlink" title="路由协议"></a>路由协议</h1><h2 id="自治系统、域内路由与域间路由"><a href="#自治系统、域内路由与域间路由" class="headerlink" title="自治系统、域内路由与域间路由"></a>自治系统、域内路由与域间路由</h2><p>✨✨<br>|协 议 |RIP| OSPF |BGP|<br>|—-|—-|—-|—-|<br>|类 型 |内 部| 内 部| 外 部|<br>|路由算法| 距离-向量 |链路状态 |路径-向量|<br>|传递协议| UDP |IP |TCP|<br>| 路径选择 |跳数最少 |代价最低 |较好，非最佳|<br>|交换结点 |和本结点相邻的路由器| 网络中的所有路由器 |和本结点相邻的路由器|<br>|交换内容 |当前本路由器知道的全部信息，即自己的路由表|与本路由器相邻的所有路由器的链路状态|首次 整个路由表;非首次 有变化的部分|<br>✨✨</p><h2 id="✨内部网关协议IGP"><a href="#✨内部网关协议IGP" class="headerlink" title="✨内部网关协议IGP"></a>✨内部网关协议IGP</h2><h3 id="✨路由信息协议-RIP"><a href="#✨路由信息协议-RIP" class="headerlink" title="✨路由信息协议 RIP"></a>✨路由信息协议 RIP</h3><p>使用距离向量算法<br>最多允许15跳 ，超过15跳即为不可达<br>每30秒广播一次RIP路由更新信息 ，建立并维护路由表（ 动态路由表 ）<br>RIP协议中每个网络的子网掩码必须相同<br>慢收敛现象：坏消息传得慢<br>UDP</p><h3 id="✨开放最短路径优先协议-OSPF"><a href="#✨开放最短路径优先协议-OSPF" class="headerlink" title="✨开放最短路径优先协议 OSPF"></a>✨开放最短路径优先协议 OSPF</h3><p>使用分布式链路状态路由算法<br>只有当链路状态发生变化时 ，路由器才用洪泛法向所有路由器发送此信息 ，并且更新过程收敛得快<br>OSPF向本自治系统中的所有路由器发送信息 （洪泛法）<br>发送的信息是与本路由器相邻的所有路由器的链路状态<br>直接用IP数据报传送<br>迪杰斯特拉算法</p><p>负载平衡 ：如果到同一个目的网络有多条相同代价的路径 ，那么可以将通信量分配给这几条路径</p><h2 id="外部网关协议EGP"><a href="#外部网关协议EGP" class="headerlink" title="外部网关协议EGP"></a>外部网关协议EGP</h2><h3 id="✨边界网关协议-BGP"><a href="#✨边界网关协议-BGP" class="headerlink" title="✨边界网关协议 BGP"></a>✨边界网关协议 BGP</h3><p>是路径向量路由选择协议</p><p>应用层协议 ，基于TCP</p><p>每个自治系统的管理员要选择至少一个路由器作为该自治系统的 “BGP发言人〃<br>一个BGP发言人与其他自治系统中的BGP发言人要交换路由信息 ，先建立TCP连接<br>再利用BGP会话交换路由信息<br>所有BGP发言人都相互交换网络可达性的信息后 ，各BGP发言人就可找出到达各个自治系统的较好路由</p><h1 id="IPv4"><a href="#IPv4" class="headerlink" title="IPv4"></a>IPv4</h1><p><img src="https://images2018.cnblogs.com/blog/1440532/201809/1440532-20180912093201807-306001370.png"></p><h2 id="✨IPv4分组"><a href="#✨IPv4分组" class="headerlink" title="✨IPv4分组"></a>✨IPv4分组</h2><p>字段：考的时候会告诉字段具体是什么，所以不用背。但是各个字段的单位要背（一种八片首饰 1B：总长度字段单位 8B：片偏移字段单位 首部长度字段单位：4B）</p><p>分片：以太网最大传送单元MTU为1500B，广域网MTU为576B</p><h2 id="✨✨✨IPv4地址与NAT"><a href="#✨✨✨IPv4地址与NAT" class="headerlink" title="✨✨✨IPv4地址与NAT"></a>✨✨✨IPv4地址与NAT</h2><p>给一个子网，问子网里可以有多少个地址（分配给多少个主机）</p><p>结合子网划分、路由聚集来考察</p><p>在网络拓扑图中进行转发，IP地址要不要改变</p><p>经过NAT路由器后IP地址怎么变化</p><p>配置NAT表项</p><h3 id="NAT"><a href="#NAT" class="headerlink" title="NAT"></a>NAT</h3><p>将内部网络的私有IP地址转换为公有IP地址</p><h2 id="✨✨子网划分、路由聚集（路由聚合、构成超网）、子网掩码与CIDR"><a href="#✨✨子网划分、路由聚集（路由聚合、构成超网）、子网掩码与CIDR" class="headerlink" title="✨✨子网划分、路由聚集（路由聚合、构成超网）、子网掩码与CIDR"></a>✨✨子网划分、路由聚集（路由聚合、构成超网）、子网掩码与CIDR</h2><p>子网划分：{网络号，子网号，主机号}</p><p>CIDR（无分类域间路由选择）：IP={ &lt; 网络前缀&gt; , &lt;主机号 &gt; }，消除传统A、 B、 C类网络划分</p><p>路由聚合、路由聚集、构成超网：网络前缀相同的连续IP地址组成的CIDR地址块</p><h2 id="ARP协议、DHCP协议与ICMP协议"><a href="#ARP协议、DHCP协议与ICMP协议" class="headerlink" title="ARP协议、DHCP协议与ICMP协议"></a>ARP协议、DHCP协议与ICMP协议</h2><p>ARP协议（地址解析协议）：IP地址-&gt;MAC地址</p><p>DHCP（动态主机配置协议）：给主机动态地分配 IP地址<br>DHCP是应用层协议 它是基于UDP的<br>广播</p><p>ICMP（网际控制报文协议）：让主机/路由器报告差错和异常情况给源点</p><h1 id="IP组播"><a href="#IP组播" class="headerlink" title="IP组播"></a>IP组播</h1><p>组播：发给一个整个组 </p><p>组播地址：D类地址</p><p>IGMP：互联网组管理协议，IP主机向任一个直接相邻的路由器报告他们的组成员情况</p><h1 id="移动IP：设备移动，IP不动"><a href="#移动IP：设备移动，IP不动" class="headerlink" title="移动IP：设备移动，IP不动"></a>移动IP：设备移动，IP不动</h1><p>设备（移动结点）到了新地方的时候，有一个新管家（外部代理），他向这个新管家要一个新IP（转交地址），然后托新管家告诉老管家（归属代理）自己的新IP（&lt;固有地址，转交地址&gt;），以后要是有什么请求就转发给自己好了</p><h1 id="网络层设备：路由器"><a href="#网络层设备：路由器" class="headerlink" title="网络层设备：路由器"></a>网络层设备：路由器</h1>]]></content>
      
      
      <categories>
          
          <category> 考研 </category>
          
          <category> 408 </category>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 考研 </tag>
            
            <tag> 计算机网络 </tag>
            
            <tag> 网络层 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据链路层</title>
      <link href="/2021/10/02/3%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/2%20%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/"/>
      <url>/2021/10/02/3%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/2%20%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/</url>
      
        <content type="html"><![CDATA[<p>（一）数据链路层的功能</p><p>（二）组帧</p><p>（三）差错控制</p><ol><li>检错编码</li><li>纠错编码</li></ol><p>（四） 流量控制与可靠传输机制</p><ol><li>流量控制、可靠传输与滑动窗口机制</li><li>停止等待协议</li><li>后退N帧协议（GBN）</li><li>选择重传协议（SR）</li></ol><p>（五） 介质访问控制</p><ol><li>信道划分：频分多路复用、时分多路复用、波分多路复用、 码分多路复用的概念和基本原理</li><li>随即访问ALOHA、CSMA 、CSMA/CD 、CSMA/CA协议</li><li>轮询访问令牌传递协议</li></ol><p>（六）局域网</p><ol><li>局域网的基本概念与体系结构</li><li>以太网与IEEE 802.3</li><li>IEEE802.11</li><li>VLAN基本概念与基本原理</li></ol><p>（七）广域网</p><ol><li>广域网的基本槪念</li><li>PPP协议</li></ol><p>（八）数据链路层设备</p><ol><li>局域网交换机及其工作原理。</li></ol><span id="more"></span><h1 id="数据链路层的功能"><a href="#数据链路层的功能" class="headerlink" title="数据链路层的功能"></a>数据链路层的功能</h1><h2 id="组帧"><a href="#组帧" class="headerlink" title="组帧"></a>组帧</h2><h2 id="🔺差错控制"><a href="#🔺差错控制" class="headerlink" title="🔺差错控制"></a>🔺差错控制</h2><h3 id="检错编码"><a href="#检错编码" class="headerlink" title="检错编码"></a>检错编码</h3><ul><li>奇偶校验码：在最后加0/1使1的个数变为偶数/奇数</li><li>CRC循环冗余码：D8～D1 = 10101011，生成多项式为 10011（有的题目中往往写作“x^4+x+1”），则其 CRC 码为：<ol><li>在数据位后加多项式最高幂次个0，比如这里的多项式最高次项为x^4，那就在数据位后加四个0，变成：101010110000，作为被除数</li><li>将多项式 10011 作为除数进行断除。对应位只做xor运算</li><li>最后得到的余数：1010，即是校验位。那么整个CRC码为：10101011 1010</li></ol></li></ul><h3 id="纠错编码：海明码"><a href="#纠错编码：海明码" class="headerlink" title="纠错编码：海明码"></a>纠错编码：海明码</h3><ul><li>海明码只能检测出2位错，纠1位错</li><li>海明码默认进行偶校验</li></ul><h4 id="生成校验码"><a href="#生成校验码" class="headerlink" title="生成校验码"></a>生成校验码</h4><ol><li>校验位数k：$2^k \ge k + n + 1$</li><li>校验位在$2^i$位置上（即001 010 100…） ， 其余各位为信息位</li><li>分组校验：001对**1进行校验（001 011 101 111…）、010对*1*进行校验（010 011 110 111）、100对1**进行校验（100 101 110 111）</li><li>校验位取值 校验位的值为对应组的所有位求异或</li></ol><h4 id="纠错"><a href="#纠错" class="headerlink" title="纠错"></a>纠错</h4><ol><li>将校验位降序排列可得G4 G3 G2 G1</li><li>设出错位为N，则得公式N = G4 G3 G2 G1，若G1=1，G3=1，N=0101转换成十进制得5</li><li>海明码第5位出现了传输错误</li></ol><h2 id="🔺🔺流量控制、-可靠传输"><a href="#🔺🔺流量控制、-可靠传输" class="headerlink" title="🔺🔺流量控制、 可靠传输"></a>🔺🔺流量控制、 可靠传输</h2><h3 id="流量控制、可靠传输与滑动窗口机制的概念"><a href="#流量控制、可靠传输与滑动窗口机制的概念" class="headerlink" title="流量控制、可靠传输与滑动窗口机制的概念"></a>流量控制、可靠传输与滑动窗口机制的概念</h3><ol><li>流量控制就是少发，比如发送窗口的使用</li><li>可靠传输：确认帧 + 超时重传</li><li>滑动窗口机制：<ul><li>发送方维持一组连续的允许发送的帧的序号 ， 称为发送窗口</li><li>接收方有接收窗口</li><li>帧序号在接收窗口内，才能收下该数据帧</li></ul></li></ol><h3 id="👍👍停止-等待协议：1-1"><a href="#👍👍停止-等待协议：1-1" class="headerlink" title="👍👍停止-等待协议：1-1"></a>👍👍停止-等待协议：1-1</h3><p>每次只允许发送一帧 ， 然后等待接收方确认</p><h3 id="👍👍👍后退N帧协议（GBN）【最常考，可能考大题】：n-1"><a href="#👍👍👍后退N帧协议（GBN）【最常考，可能考大题】：n-1" class="headerlink" title="👍👍👍后退N帧协议（GBN）【最常考，可能考大题】：n-1"></a>👍👍👍后退N帧协议（GBN）【最常考，可能考大题】：n-1</h3><p>发送方连续发送帧 ， 当接收方检测出失序的信息帧后 ， 要求发送方重发最后一个正确接收的信息帧之后的所有未被确认的帧（ 累积确认 ）</p><p>累积确认（ 偶尔捎带确认 ）<br>接收方只按顺序接收帧 ， 不按序无情丟弃<br>确认序列号最大的、 按序到达的帧<br>发送窗口最大为 接收窗口大小为1</p><p>若信道的传输质量很差导致误码率较大时 ， 后退N帧协议不一定优于停止-等待协议</p><h3 id="👍选择重传协议（-SR-：n-n"><a href="#👍选择重传协议（-SR-：n-n" class="headerlink" title="👍选择重传协议（ SR )：n-n"></a>👍选择重传协议（ SR )：n-n</h3><p>每个发送缓冲区对应一个计时器 ， 当计时器超时时 ， 缓冲区的帧就会重传<br>一旦接收方怀疑帧出错 ， 就会发一个否定帧NAK给发送方 ， 要求发送方对NAK中指定的帧进行重传<br>选择重传 接收端要设置具有相当容量的缓冲区来暂存那些未按序正确收到的帧</p><h2 id="介质访问控制（有限的带宽给谁）"><a href="#介质访问控制（有限的带宽给谁）" class="headerlink" title="介质访问控制（有限的带宽给谁）"></a>介质访问控制（有限的带宽给谁）</h2><h3 id="信道划分（静态）"><a href="#信道划分（静态）" class="headerlink" title="信道划分（静态）"></a>信道划分（静态）</h3><ol><li>频分多路复用</li><li>时分多路复用</li><li>波分多路复用</li><li>🥖码分多路复用<ul><li>A发送到C的比特用8个码片表示。(-1 -1 -1 +1 +1 -1 +1 +1)这个表示比特1的码片向量称为$S$，取反码(+1 +1 +1 -1 -1 +1 -1 -1)表示0</li><li>B发送到C的比特同样用8个码片表示，(+1 +1 -1 +1 -1 -1 -1 +1)表示1，记为$T$</li><li>$S$和$T$正交，即$S·T=0$</li><li>$S$和$T$都是规格向量，即$S·S=\frac18\sum_{i=1}^8 S_i^2=1$</li><li>假设A发送1，B发送0给C，则要发送的向量是$X=S+(-T)$=(0 0 -2 2 0 -2 0 2)</li><li>C收到$X$后进行解码<ul><li>$S·X/4=1$，得到A发出的是1</li><li>$T·X/4=-1$，得到B发出的是0</li></ul></li></ul></li></ol><h3 id="随机访问（动态）"><a href="#随机访问（动态）" class="headerlink" title="随机访问（动态）"></a>随机访问（动态）</h3><h4 id="ALOHA-协议：想发就发"><a href="#ALOHA-协议：想发就发" class="headerlink" title="ALOHA 协议：想发就发"></a>ALOHA 协议：想发就发</h4><p>当网络中的任何一个站点需要发送数据时 ， 可以不进行任何检测就发送数据</p><p>在一段时间内未收到确认 ， 那么该站点就认为传输过程中发生了冲突。 发送站点需要等待一段时间后再发送数据 ， 直至发送成功</p><h4 id="🔺CSMA协议：先听再发"><a href="#🔺CSMA协议：先听再发" class="headerlink" title="🔺CSMA协议：先听再发"></a>🔺CSMA协议：先听再发</h4><p>一个结点要发送数据时 ， 首先侦听信道</p><ol><li>1-坚持 CSMA：继续听直到能发</li><li>非坚持 CSMA：走了走了，一会再来</li><li>p-坚持CSMA：信道空闲 ， 那么以概率p发送数据 ， 以1-P概率推迟到下一个时隙</li></ol><h4 id="🔺CSMA-CD协议：有线"><a href="#🔺CSMA-CD协议：有线" class="headerlink" title="🔺CSMA/CD协议：有线"></a>🔺CSMA/CD协议：有线</h4><ol><li>载波帧听 ： 发送前先侦听 </li><li>碰撞检测 ： 边发送边侦听</li><li>最小帧长 = 总线传播时延 * 数据传输率 * 2</li><li>争用期$2τ$ ： 以太网端到端的往返时间 ， 只有度过了争用期才能确定本次传输不会发生冲突</li><li>二进制指数退避算法：<ol><li>第一次碰撞：退避${0,1}*2τ$</li><li>第二次碰撞：退避${0,1,2,3}*2τ$</li><li>第三次碰撞：退避${0,1,2,3,4,5,6,7}*2τ$</li><li>第十次碰撞：退避${0,1,2…2^{10}-1}*2τ$</li><li>第十一次到第十六次同第十次</li><li>冲突次数超过16次后，发送失败，丢弃传输的帧，发送错误报告</li></ol></li></ol><h4 id="🔺🔺-CSMA-CA协议：无线"><a href="#🔺🔺-CSMA-CA协议：无线" class="headerlink" title="🔺🔺 CSMA/CA协议：无线"></a>🔺🔺 CSMA/CA协议：无线</h4><ol><li>载波帧听 ： 发送前先侦听 <!-- 2. 碰撞检测 ： 边发送边侦听 --></li><li>碰撞避免<ol><li>预约信道 ： 发送方在发送数据的同时向其他站点通知自己传输数据需要的时间长度 ， 让其他站点在这段时间内不发送数据 ， 避免碰撞</li><li>ACK帧 ： 所有站点在正确接收到发给自己的数据帧（ 除广播帧和组播帧 ） 后 ， 都需要向发送方发回一个ACK帧</li></ol></li><li>二进制指数退避算法</li></ol><p>CSMA/CD与CSMA/CA区别：</p><ol><li>CSMA/CD可以检测冲突 ， 但无法避免 ； CSMA/CA发送包的同时不能检测到信道上有无冲突</li><li>CSMA/CD用于总线形以太网,CSMA/CA用于无线局域网802.1 la/b/g/n等</li><li>CSMA/CD通过电缆中的电压变化来检测 ； 而CSMA/CA采用能量检测、 载波检测和能量载波混合检测三种检测信道空闲的方式</li></ol><h3 id="轮询访问"><a href="#轮询访问" class="headerlink" title="轮询访问"></a>轮询访问</h3><h4 id="令牌传递协议"><a href="#令牌传递协议" class="headerlink" title="令牌传递协议"></a>令牌传递协议</h4><h1 id="🔺各种网络"><a href="#🔺各种网络" class="headerlink" title="🔺各种网络"></a>🔺各种网络</h1><h2 id="局域网"><a href="#局域网" class="headerlink" title="局域网"></a>局域网</h2><h3 id="以太网（以太网几乎就等于局域网）"><a href="#以太网（以太网几乎就等于局域网）" class="headerlink" title="以太网（以太网几乎就等于局域网）"></a>以太网（以太网几乎就等于局域网）</h3><p>总线形拓扑结构<br>无连接<br>介质访问控制（ MAC ) 地址：网卡</p><h3 id="IEEE802-3-amp-IEEE802-11"><a href="#IEEE802-3-amp-IEEE802-11" class="headerlink" title="IEEE802.3 &amp; IEEE802.11"></a>IEEE802.3 &amp; IEEE802.11</h3><p>3核心协议是CSMA/CD<br>11核心协议是CSMA/CA</p><h3 id="⌛⌛【新增】VLAN基本概念与基本原理"><a href="#⌛⌛【新增】VLAN基本概念与基本原理" class="headerlink" title="⌛⌛【新增】VLAN基本概念与基本原理"></a>⌛⌛【新增】VLAN基本概念与基本原理</h3><p>虚拟局域网VLAN可以隔离冲突域 ， 而且可以隔离广播域</p><h2 id="广域网"><a href="#广域网" class="headerlink" title="广域网"></a>广域网</h2><!-- #### PPP协议 & HDLC协议（考过） --><!-- 原因：新大纲删除了 --><ol><li>PPP协议：点对点 全双工 面向字节 帧不纠错不序号不流量控制差错检测考CRC校验<!-- 2. HDLC协议：面向位 --></li></ol><h1 id="数据链路层设备"><a href="#数据链路层设备" class="headerlink" title="数据链路层设备"></a>数据链路层设备</h1><!-- 网桥  --><!-- 原因：新大纲删除了 --><h2 id="局域网交换机【考过画转发表】"><a href="#局域网交换机【考过画转发表】" class="headerlink" title="局域网交换机【考过画转发表】"></a>局域网交换机【考过画转发表】</h2><p>以太网交换机是一个多端口的网桥<br>分隔冲突域<br>全双工<br>注意转发过程</p><p>画转发表：</p><ol><li>从哪个端口来</li></ol>]]></content>
      
      
      <categories>
          
          <category> 考研 </category>
          
          <category> 408 </category>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 考研 </tag>
            
            <tag> 计算机网络 </tag>
            
            <tag> 数据链路层 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络体系结构&amp;物理层（不考大题）</title>
      <link href="/2021/10/02/3%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/1%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%20&amp;%20%E7%89%A9%E7%90%86%E5%B1%82%EF%BC%88%E4%B8%8D%E8%80%83%E5%A4%A7%E9%A2%98%EF%BC%89/"/>
      <url>/2021/10/02/3%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/1%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%20&amp;%20%E7%89%A9%E7%90%86%E5%B1%82%EF%BC%88%E4%B8%8D%E8%80%83%E5%A4%A7%E9%A2%98%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>（一）通信基础</p><ol><li>信道、信号、带宽、码元、波特、速率、信源与信宿等基本概念</li><li>奈奎斯特定理与香农定理</li><li>编码与调制</li><li>电路交换、报文交换与分组交换</li><li>数据报与虚电路</li></ol><p>（二）传输介质</p><ol><li>双绞线、同轴电缆、光纤与无线传输介质</li><li>物理层接口的特性</li></ol><p>（三）物理层设备</p><ol><li>中继器</li><li>集线器</li></ol><span id="more"></span><h1 id="计算机网络体系结构"><a href="#计算机网络体系结构" class="headerlink" title="计算机网络体系结构"></a>计算机网络体系结构</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ol><li>什么是计算机网络</li><li>计算机网络组成</li><li>计算机网络功能</li><li>计算机网络分类</li></ol><h2 id="体系结构参考模型"><a href="#体系结构参考模型" class="headerlink" title="体系结构参考模型"></a>体系结构参考模型</h2><ol><li>协议、接口、服务</li><li>ISO/OSI</li><li>TCP/IP</li></ol><h1 id="物理层"><a href="#物理层" class="headerlink" title="物理层"></a>物理层</h1><h2 id="通信基础"><a href="#通信基础" class="headerlink" title="通信基础"></a>通信基础</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ol><li>信道、信号、信源、信宿</li><li>带宽、速率、码元、波特</li></ol><h3 id="🔺奈氏准则和香农定理"><a href="#🔺奈氏准则和香农定理" class="headerlink" title="🔺奈氏准则和香农定理"></a>🔺奈氏准则和香农定理</h3><ol><li>奈氏准则：极限数据传输率 $= 2W *log_2V$<ul><li>$W$：信道带宽（Hz）</li><li>$V$：码元种类</li></ul></li><li>香农定理：极限数据传输率 $= W log_2(1+S/N)$<ul><li>$1dB = 10lg(S/N)$</li><li>$S/N$：信噪比</li></ul></li></ol><h3 id="🔺编码与调制"><a href="#🔺编码与调制" class="headerlink" title="🔺编码与调制"></a>🔺编码与调制</h3><ol><li>编码：变为数字信号<ul><li>归零编码</li><li>非归零编码</li><li>曼彻斯特编码</li><li>差分曼彻斯特编码</li></ul></li><li>调制：变为模拟信号</li></ol><h3 id="🔺数据交换方式"><a href="#🔺数据交换方式" class="headerlink" title="🔺数据交换方式"></a>🔺数据交换方式</h3><ol><li>考察交换之间的差别（电路交换和分组交换的差别、数据报方式和虚电路方式的区别等）</li><li>给出网络拓扑图，问用电路交换方式和分组交换方式分别时间是多少（抓住第一个和最后一个）</li></ol><ul><li>电路交换（连接建立+数据传输+连接释放）</li><li>报文交换（大报文为单位）</li><li>分组交换（小分组为单位）<ul><li>数据报方式（无连接）</li><li>虚电路方式（建立连接）</li></ul></li></ul><h2 id="传输介质"><a href="#传输介质" class="headerlink" title="传输介质"></a>传输介质</h2><ol><li>导引型：双绞线、同轴电缆、光纤<ul><li>光纤：单模光纤、多模光纤</li></ul></li><li>非导引型：无线电波、微波</li></ol><h3 id="🔺物理层接口的特性（泄气工程）"><a href="#🔺物理层接口的特性（泄气工程）" class="headerlink" title="🔺物理层接口的特性（泄气工程）"></a>🔺物理层接口的特性（泄气工程）</h3><ol><li>机械特性 引线的数目、 引脚的数量和排列情况等</li><li>电气特性 信号的电压高低、 阻抗匹配、 传输速率和距离限制等。</li><li>功能特性 某条线上出现的某一电平的电压表示何种意义 ， 接口部件的信号线（ 数据线、 控制线、 定时线等 ） 的用途</li><li>规程特性 工作规程、时序关系</li></ol><h2 id="物理层设备：中继器、集线器"><a href="#物理层设备：中继器、集线器" class="headerlink" title="物理层设备：中继器、集线器"></a>物理层设备：中继器、集线器</h2>]]></content>
      
      
      <categories>
          
          <category> 考研 </category>
          
          <category> 408 </category>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 考研 </tag>
            
            <tag> 计算机网络 </tag>
            
            <tag> 物理层 </tag>
            
            <tag> 计算机网络体系结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>六-2 曲线曲面积分</title>
      <link href="/2021/09/26/1%20%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/9%20%E6%9B%B2%E7%BA%BF%E6%9B%B2%E9%9D%A2%E7%A7%AF%E5%88%86/"/>
      <url>/2021/09/26/1%20%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/9%20%E6%9B%B2%E7%BA%BF%E6%9B%B2%E9%9D%A2%E7%A7%AF%E5%88%86/</url>
      
        <content type="html"><![CDATA[<p>考题类型包括：</p><ol><li>Ⅰ类曲线积分的计算：对弧长的曲线积分 $\int_L f(x,y)ds$</li><li>Ⅱ类曲线积分的计算：对坐标的曲线积分 $\int_L Pdx + Qdy$</li><li>Ⅰ类曲面积分的计算：对面积的曲面积分 $\int_S f(x,y)d \sigma$</li><li>Ⅱ类曲面积分的计算：对坐标的曲面积分 $\int_S Pdydz+Qdxdz+Rdxdy$</li><li>积分与路径无关的证明；无关求$u(x,y)$ / 无关求$\int_c Pdx+Qdy$；无关求$P$、$Q$</li><li>物理应用：旋度、散度、梯度</li></ol><span id="more"></span><h2 id="Ⅰ类曲线积分的计算-int-L-f-x-y-ds"><a href="#Ⅰ类曲线积分的计算-int-L-f-x-y-ds" class="headerlink" title="Ⅰ类曲线积分的计算 $\int_L f(x,y)ds$"></a>Ⅰ类曲线积分的计算 $\int_L f(x,y)ds$</h2><h5 id="替代法"><a href="#替代法" class="headerlink" title="替代法"></a>替代法</h5><ol><li>$\int_L f(x,y)ds = \int_{t1}^{t2} f[ x(t), y(t)] \sqrt{(x’)^2 + (y’)^2} dt$ </li><li>$\int_L f(x,y)ds = \int_a^b f[x, y(x)] \sqrt{1 + (y’)^2}dx$</li><li>$\int_L f(x,y)ds = \int_\alpha^\beta f[r(\theta)cos\theta, r(\theta)sin\theta]\sqrt{r^2(\theta) + [r’(\theta)]^2}$</li></ol><h5 id="对称"><a href="#对称" class="headerlink" title="对称"></a>对称</h5><ol><li>轴对称：曲线沿着$x/y$轴对称<ul><li>若$f_1=f_2$，$ \int_L f=2\int_{L_1} f $</li><li>若$f_1=-f_2$, $\int_L f=0$</li></ul></li><li>轮换对称性：$f(x,y) = f(y,x)$<ul><li>$\int_L f(x,y)ds = \frac{1}{2} \int_L [f(x,y) + f(y,x)]ds$</li><li>$\int_L f(x,y,z)ds = \frac{1}{3} \int_L [f(x,y,z) + f(y,z,x) + f(z,x,y)]ds$</li></ul></li></ol><h2 id="Ⅱ类曲线积分的计算-int-L-Pdx-Qdy"><a href="#Ⅱ类曲线积分的计算-int-L-Pdx-Qdy" class="headerlink" title="Ⅱ类曲线积分的计算 $\int_L Pdx + Qdy$"></a>Ⅱ类曲线积分的计算 $\int_L Pdx + Qdy$</h2><h3 id="2-dim：-int-L-Pdx-Qdy"><a href="#2-dim：-int-L-Pdx-Qdy" class="headerlink" title="2-dim：$\int_L Pdx + Qdy$"></a>2-dim：$\int_L Pdx + Qdy$</h3><h5 id="替代法-1"><a href="#替代法-1" class="headerlink" title="替代法"></a>替代法</h5><ol><li>$\int_L Pdx+Qdy = \int_{t_1}^{t_2} { P[x(t),y(t)]*x’(t) + Q[x(t),y(t)]*y’(t) }dt$</li><li>$\int_L Pdx+Qdy = \int_a^b { P[x,y(x)]*1 + Q[x ,y(x)]*y’ }dx$</li></ol><h5 id="对称-1"><a href="#对称-1" class="headerlink" title="对称"></a>对称</h5><ol><li>关于$x$轴对称<ul><li>若$f_1=f_2$，$ \int_L f=2\int_{L_1} f $</li><li>若$f_1=-f_2$, $\int_L f=0$</li></ul></li><li><font color=purple >关于$y$轴对称</font><ul><li>若$f_1=f_2$，$ \int_L f=0$</li><li>若$f_1=-f_2$, $\int_L f=2\int_{L_1} f $</li></ul></li></ol><h4 id="环路积分：-oint-L-Pdx-Qdy"><a href="#环路积分：-oint-L-Pdx-Qdy" class="headerlink" title="环路积分：$\oint_L Pdx+Qdy$"></a>环路积分：$\oint_L Pdx+Qdy$</h4><h5 id="格林公式"><a href="#格林公式" class="headerlink" title="格林公式"></a>格林公式</h5><ol><li>$\oint_L Pdx+Qdy = \iint_\Sigma (\frac{\partial Q}{\partial x}-\frac{\partial P}{\partial y})d\sigma$<ul><li>$dσ=dxdy$</li><li>条件1：$\Sigma$联通</li><li>条件2：$L$为$\Sigma$正向边界（右手拇指指向的方向和$\Sigma$方向相同）</li><li>条件3：$P$、$Q$在$\Sigma$上连续可偏导</li></ul></li></ol><h5 id="挖去奇点转化为格林公式"><a href="#挖去奇点转化为格林公式" class="headerlink" title="挖去奇点转化为格林公式"></a>挖去奇点转化为格林公式</h5><p>$\oint_L = \oint_L + \oint_{L_0^-} + \oint_{L_0^+}$</p><p>$\because \oint_L + \oint_{L_0^-} = 0$</p><p>$\therefore \oint_L = \oint_{L_0^+}$</p><ul><li>注意：$\oint_L + \oint_{L_0^-} = 0$不总是成立。格林公式的条件只有连续可偏导</li></ul><h4 id="非环路积分：-int-L-Pdx-Qdy"><a href="#非环路积分：-int-L-Pdx-Qdy" class="headerlink" title="非环路积分：$\int_L Pdx+Qdy$"></a>非环路积分：$\int_L Pdx+Qdy$</h4><h5 id="加线，变成环路"><a href="#加线，变成环路" class="headerlink" title="加线，变成环路"></a>加线，变成环路</h5><p>略</p><h5 id="路径无关，改为好算的折线"><a href="#路径无关，改为好算的折线" class="headerlink" title="路径无关，改为好算的折线"></a>路径无关，改为好算的折线</h5><ol><li>路径无关的充要条件<ul><li>$\frac{\partial Q}{\partial x}=\frac{\partial P}{\partial y}$</li><li>$\exists u(x,y)$使得$du=Pdx+Qdy$ 【全微分】</li><li>$u(x,y)$的梯度$(\frac{\partial u}{\partial x},\frac{\partial u}{\partial y})$为$(P,Q)$<ul><li>$P = \frac{\partial u}{\partial x}$</li><li>$Q = \frac{\partial u}{\partial y}$</li></ul></li><li>$\forall$闭曲线$\oint_L = 0$</li></ul></li></ol><h3 id="3-dim：-int-L-Pdx-Qdy-Rdz"><a href="#3-dim：-int-L-Pdx-Qdy-Rdz" class="headerlink" title="3-dim：$\int_L Pdx + Qdy + Rdz$"></a>3-dim：$\int_L Pdx + Qdy + Rdz$</h3><h5 id="替代法-2"><a href="#替代法-2" class="headerlink" title="替代法"></a>替代法</h5><ol><li>$\int_L Pdx+Qdy+Rdz = \int_{t_1}^{t_2} { P[x(t),y(t)]*x’(t) + Q[x(t),y(t)]*y’(t) + R[x(t),y(t)]*z’(t) }dt$</li></ol><h4 id="环路积分：-oint-L-Pdx-Qdy-Rdz"><a href="#环路积分：-oint-L-Pdx-Qdy-Rdz" class="headerlink" title="环路积分：$\oint_L Pdx+Qdy+Rdz$"></a>环路积分：$\oint_L Pdx+Qdy+Rdz$</h4><h5 id="斯托克斯公式"><a href="#斯托克斯公式" class="headerlink" title="斯托克斯公式"></a>斯托克斯公式</h5><ol><li><p>$\oint_L Pdx + Qdy + Rdz = \iint_\Sigma<br>\left(<br>\begin {matrix}<br> dydz &amp; dxdz &amp; dxdy \\<br> \frac{\partial}{\partial x} &amp; \frac{\partial}{\partial y} &amp; \frac{\partial}{\partial z} \\<br> P &amp; Q &amp; R<br>\end {matrix}<br>\right)$</p></li><li><p>$\oint_L Pdx + Qdy + Rdz = \iint_\Sigma<br>\left(<br>\begin {matrix}<br> cos\alpha &amp; cos\beta &amp; cos\gamma \\<br> \frac{\partial}{\partial x} &amp; \frac{\partial}{\partial y} &amp; \frac{\partial}{\partial z} \\<br> P &amp; Q &amp; R<br>\end {matrix}<br>\right)dS$</p><ul><li>$\Sigma$：绷在$L$上的面</li><li>$\Sigma$方向：右手准则。四指沿曲线方向时，拇指指向为$\Sigma$面法向量$\vec{n}$。</li><li>$cos\alpha$、$cos\beta$、$cos\gamma$：$\vec{n_0}=(cos\alpha,cos\beta,cos\gamma)$</li></ul></li></ol><h4 id="非环路积分：-int-L-Pdx-Qdy-Rdz"><a href="#非环路积分：-int-L-Pdx-Qdy-Rdz" class="headerlink" title="非环路积分：$\int_L Pdx+Qdy+Rdz$"></a>非环路积分：$\int_L Pdx+Qdy+Rdz$</h4><h5 id="补成环路"><a href="#补成环路" class="headerlink" title="补成环路"></a>补成环路</h5><p>略</p><h2 id="Ⅰ类曲面积分-iint-Sigma-f-x-y-dS"><a href="#Ⅰ类曲面积分-iint-Sigma-f-x-y-dS" class="headerlink" title="Ⅰ类曲面积分 $\iint_\Sigma f(x,y)dS$"></a>Ⅰ类曲面积分 $\iint_\Sigma f(x,y)dS$</h2><h3 id="替代法-3"><a href="#替代法-3" class="headerlink" title="替代法"></a>替代法</h3><p>$=\iint_{D_{xy}}f(x,y,z(x,y))\sqrt{1+z_x^2 + z_y^2}dxdy$</p><h2 id="Ⅱ类曲面积分-iint-Sigma-Pdydz-Qdxdz-Rdxdy"><a href="#Ⅱ类曲面积分-iint-Sigma-Pdydz-Qdxdz-Rdxdy" class="headerlink" title="Ⅱ类曲面积分 $\iint_\Sigma Pdydz+Qdxdz+Rdxdy$"></a>Ⅱ类曲面积分 $\iint_\Sigma Pdydz+Qdxdz+Rdxdy$</h2><h3 id="投影法"><a href="#投影法" class="headerlink" title="投影法"></a>投影法</h3><p>$\iint_\Sigma P(x,y,z)dydz = \pm \iint_{D_{xy}} P(x,y,z(x,y))dydz$</p><p>具体正负看是向上（右、前）的面还是向下（左、后）的面，即法向量和坐标轴夹角$&lt;\frac \pi 2$为$+$，否则为$-$</p><h3 id="高斯公式"><a href="#高斯公式" class="headerlink" title="高斯公式"></a>高斯公式</h3><p>$\iint_\Sigma Pdydz+Qdxdz+Rdxdy = \iiint_\Omega (\frac{\partial P}{\partial x}+\frac{\partial Q}{\partial y}+\frac{\partial R}{\partial z})dv$</p><ol><li>外表面</li><li>连续可偏导</li></ol><h2 id="积分与路径无关"><a href="#积分与路径无关" class="headerlink" title="积分与路径无关"></a>积分与路径无关</h2><h3 id="积分与路径无关的证明"><a href="#积分与路径无关的证明" class="headerlink" title="积分与路径无关的证明"></a>积分与路径无关的证明</h3><ol><li>$\frac{\partial Q}{\partial x} \equiv \frac{\partial P}{\partial y}$</li><li>$\exists u(x,y) = Pdx+Qdy$（全微分）</li><li>曲面z=u(x,y)上每一个点梯度为$(\frac{\partial u}{\partial x} , \frac{\partial u}{\partial y})$</li><li>$\forall$闭曲线$\oint_L = 0$ </li></ol><h3 id="已知无关（-du-Pdx-Qdy-，P、Q已知），求-u-x-y"><a href="#已知无关（-du-Pdx-Qdy-，P、Q已知），求-u-x-y" class="headerlink" title="已知无关（$du=Pdx+Qdy$，P、Q已知），求$u(x,y)$"></a>已知无关（$du=Pdx+Qdy$，P、Q已知），求$u(x,y)$</h3><h4 id="起点为-x-0-y-0"><a href="#起点为-x-0-y-0" class="headerlink" title="起点为$(x_0,y_0)$"></a>起点为$(x_0,y_0)$</h4><p>$u=\int_{x_0}^xPdx+\int_{y_0}^yQdy+C$</p><h4 id="没有起点"><a href="#没有起点" class="headerlink" title="没有起点"></a>没有起点</h4><ol><li>计算$u(x,y)=\int Pdx + C(y)=F(x,y) + C(y)$，$C(y)$未知，$F(x,y)$解出来了</li><li>由$\frac{\partial u}{\partial y} = Q$，即$\frac{F(x,y) + C(y)}{\partial y} = Q(x,y)$解出$C(y)$</li><li>$u(x,y)=F(x,y) + C(y)$。注意有两个C，$C_1$是P不定积分出来的，$C_2$是解$C(y)$解出来的</li></ol><h3 id="发现无关求-int-Pdx-Qdy"><a href="#发现无关求-int-Pdx-Qdy" class="headerlink" title="发现无关求$\int Pdx+Qdy$"></a>发现无关求$\int Pdx+Qdy$</h3><p>法一：同求$u(x,y)$</p><p>法二：特殊路径直接求（绕开奇点）</p><h3 id="只知道无关，求PQ方程或PQ中的参数"><a href="#只知道无关，求PQ方程或PQ中的参数" class="headerlink" title="只知道无关，求PQ方程或PQ中的参数"></a>只知道无关，求PQ方程或PQ中的参数</h3><p>利用 $\frac{\partial Q}{\partial x} = \frac{\partial P}{\partial y}$</p><h2 id="应用（都以x轴方向为例）"><a href="#应用（都以x轴方向为例）" class="headerlink" title="应用（都以x轴方向为例）"></a>应用（都以x轴方向为例）</h2><h3 id="质心"><a href="#质心" class="headerlink" title="质心"></a>质心</h3><ul><li>2-dim：$\frac{\iint x \rho dxdy}{\iint \rho dxdy}$</li><li>3-dim：$\frac{\iiint x\rho dxdydz}{\iiint \rho dxdydz}$或$\frac{\iiint x \rho dv}{\iiint \rho dv}$</li></ul><h3 id="转动惯量"><a href="#转动惯量" class="headerlink" title="转动惯量"></a>转动惯量</h3><ul><li>2-dim：$I_x = \iint y^2 \rho d \sigma$</li><li>3-dim：$I_x = \iint (y^2+z^2) \rho dv$</li></ul><h3 id="环通量"><a href="#环通量" class="headerlink" title="环通量"></a>环通量</h3><p>$\int_L Pdx + Qdy + Rdz$</p><h3 id="通量"><a href="#通量" class="headerlink" title="通量"></a>通量</h3><p>$\iint_\Sigma Pdydz+Qdxdz+Rdxdy$</p><h3 id="梯度、旋度、散度"><a href="#梯度、旋度、散度" class="headerlink" title="梯度、旋度、散度"></a>梯度、旋度、散度</h3><ul><li>梯度：$grad = (\frac{\partial f}{\partial x},\frac{\partial f}{\partial y},\frac{\partial f}{\partial z})$</li><li>散度：$div = \frac{\partial P}{\partial x}+\frac{\partial Q}{\partial y}+\frac{\partial R}{\partial z}$</li><li>旋度：$rot=<br>\left(<br>\begin {matrix}<br>  \vec i &amp; \vec j &amp; \vec k \\<br>  \frac{\partial}{\partial x} &amp; \frac{\partial}{\partial y} &amp; \frac{\partial}{\partial z} \\<br>  P &amp; Q &amp; R<br>\end {matrix}<br>\right)$</li></ul>]]></content>
      
      
      <categories>
          
          <category> 考研 </category>
          
          <category> 数学 </category>
          
          <category> 高等数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 考研 </tag>
            
            <tag> 高等数学 </tag>
            
            <tag> 曲线曲面积分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/09/23/%E5%B7%A5%E5%85%B7/hello-world/"/>
      <url>/2021/09/23/%E5%B7%A5%E5%85%B7/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><span id="more"></span><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br><span class="line">$ hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure><p>e.g. hexo new post 2021 09 25 test3</p><table><thead><tr><th>Layout</th><th>Path</th><th>Filename</th><th>Description</th></tr></thead><tbody><tr><td>post</td><td>source/_posts</td><td>:title</td><td>Post title (lower case, with spaces replaced by hyphens)</td></tr><tr><td>page</td><td>source</td><td>:year:month:day</td><td>create time with leading zeros, e.g. 04</td></tr></tbody></table><!-- More info: [Writing](https://hexo.io/docs/writing.html) --><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>T001 Two Sum</title>
      <link href="/2021/09/01/%E5%85%B6%E4%BB%96/Leetcode/001%20Two%20Sum/"/>
      <url>/2021/09/01/%E5%85%B6%E4%BB%96/Leetcode/001%20Two%20Sum/</url>
      
        <content type="html"><![CDATA[<p>思路：hashtable存{target - num , index}的键值对</p><p>遇到的问题</p><ol><li><p>函数返回类型是vector<int>，那么如何返回呢？<br>对于成功找到的返回return {mymap.find(nums[i])-&gt;second, i};<br>失败返回return {};</p></li><li><p>unordered_map&lt;&gt; 加新内容用mymap[target - nums[i]] = i;<br>加入一个{target - nums[i]], i}的键值对</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> stl </tag>
            
            <tag> 模拟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端基础Html Css Js</title>
      <link href="/2021/08/30/%E5%85%B6%E4%BB%96/%E5%89%8D%E7%AB%AF/2021-8-30/"/>
      <url>/2021/08/30/%E5%85%B6%E4%BB%96/%E5%89%8D%E7%AB%AF/2021-8-30/</url>
      
        <content type="html"><![CDATA[<p>仅记载真实面试中出现的（阿里前端）</p><span id="more"></span><h1 id="html"><a href="#html" class="headerlink" title="html"></a>html</h1><ol><li><p>块级元素和行内元素的区别</p><ul><li>行内元素a,img,input,lable,select,span,textarea,font：　　<ul><li>可多个并排</li><li>不可设置宽高</li></ul></li><li>块级元素div,p,table,form,h*,dl,ol,ul,li：<ul><li>不可</li><li>可（宽度默认父级的100%<h1 id="css"><a href="#css" class="headerlink" title="css"></a>css</h1></li></ul></li></ul></li><li><p>块居中</p><ul><li>x<ul><li><strong>块内行</strong>父text-align: center </li><li><strong>块内块</strong>子margin: 0 auto </li><li><strong>多块</strong>子display: inline-block（套1） 父text-align: center</li></ul></li><li>y<br>  * </li></ul></li><li><p>position</p><ul><li>absolute    <ul><li>生成绝对定位的元素，相对于 static 定位以外的第一个父元素进行定位。</li><li>元素的位置通过 “left”, “top”, “right” 以及 “bottom” 属性进行规定。</li></ul></li><li>fixed    <ul><li>生成绝对定位的元素，相对于浏览器窗口进行定位。</li><li>元素的位置通过 “left”, “top”, “right” 以及 “bottom” 属性进行规定。</li></ul></li><li>relative    <ul><li>生成相对定位的元素，相对于其正常位置进行定位。</li><li>因此，”left:20” 会向元素的 LEFT 位置添加 20 像素。</li></ul></li><li>static    <ul><li>默认值。没有定位，元素出现在正常的流中（忽略 top, bottom, * left, right 或者 z-index 声明）。</li><li>inherit    规定应该从父元素继承 position 属性的值。</li></ul></li></ul></li><li><p>充满页面<br>div {<br>position: absolute;<br>top: 0;<br>bottom: 0;<br>}<br>.children{<br> height: calc(100% - 187px);<br>}</p></li></ol><h1 id="http"><a href="#http" class="headerlink" title="http"></a>http</h1><ol><li>如何post图像（文件）？<br>rfc186用以支持文件上传。所以Content-Type的类型扩充了multipart/form-data用以支持向服务器发送二进制数据。因此发送post请求时候，表单属性enctype共有二个值可选，这个属性管理的是表单的MIME编码：</li></ol><p>①application/x-www-form-urlencoded(默认值)<br>②multipart/form-data<br>其实form表单在你不写enctype属性时，也默认为其添加了enctype属性值，默认值是enctype=“application/x- www-form-urlencoded”.<br>原文：<a href="https://blog.csdn.net/xiaojianpitt/article/details/6856536">https://blog.csdn.net/xiaojianpitt/article/details/6856536</a></p><p>表单如下：</p><h1 id="疑问"><a href="#疑问" class="headerlink" title="疑问"></a>疑问</h1><p>post和get</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Html/Css/Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Html </tag>
            
            <tag> Css </tag>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6</title>
      <link href="/2021/08/30/%E5%85%B6%E4%BB%96/%E5%89%8D%E7%AB%AF/ES6/"/>
      <url>/2021/08/30/%E5%85%B6%E4%BB%96/%E5%89%8D%E7%AB%AF/ES6/</url>
      
        <content type="html"><![CDATA[<p>let和var的区别<br>作用域不同 var是函数作用域,let是块作用域<br>let不能在定义之前访问该变量,但是var可以<br>let不能被重新定义,但是var是可以的</p><p>全局作用域<br>直接编写在script标签中的js代码，都在全局作用域<br>全局作用域在页面打开时创建，在页面关闭时销毁<br>在全局作用域中有一个全局对象window，它代表的是一个浏览器的窗口，由浏览器创建我们可以直接使用</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试中遇到的一些不限前端的问题</title>
      <link href="/2021/08/30/%E5%85%B6%E4%BB%96/%E5%89%8D%E7%AB%AF/%E7%9C%9F%E9%A2%98/"/>
      <url>/2021/08/30/%E5%85%B6%E4%BB%96/%E5%89%8D%E7%AB%AF/%E7%9C%9F%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>内存堆/栈<br>栈:局部变量和函数参数，函数调用后返回的地址/值。（为运行函数而分配的局部变量、函数参数、函数调用后返回地址等存放在栈区）<br>堆:使用new/malloc进行分配，使用delete或delete[]释放<br>1、栈区（stack）― 由编译器自动分配释放 ，存放函数的参数值，局部变量的值等。其操作方式类似于数据结构中的栈。<br>2、堆区（heap） ― 一般由程序员分配释放， 若程序员不释放，程序结束时可能由OS回收 。注意它与数据结构中的堆是两回事，分配方式倒是类似于链表<br>3、全局区（静态区）（static）―，全局变量和静态变量的存储是放在一块的，初始化的全局变量和静态变量在一块区域， 未初始化的全局变量和未初始化的静态变量在相邻的另一块区域。 - 程序结束后有系统释放<br>4、文字常量区 ―常量字符串就是放在这里的。 程序结束后由系统释放<br>5、程序代码区―存放函数体的二进制代码。<br>int a = 0; 全局初始化区<br>char *p1; 全局未初始化区<br>main()<br>{<br>int b; 栈</p><p>char s[] = “abc”; 栈</p><p>char *p2; 栈</p><p>char *p3 = “123456”; 123456\0在常量区，p3在栈上。</p><p>static int c =0； 全局（静态）初始化区</p><p>p1 = (char *)malloc(10);<br>p2 = (char *)malloc(20);</p><p>浏览器地址栏输入网址后会发生什么？具体的流程有哪些？</p><ol><li>浏览器根据请求的URL交给DNS域名解析，找到真实IP，向服务器发起请求；</li><li>服务器交给后台处理完成后返回数据，浏览器接收文件（HTML、JS、CSS、图象等）；</li><li>浏览器对加载到的资源（HTML、JS、CSS等）进行语法解析，建立相应的内部数据结构（如HTML的DOM）；</li><li>载入解析到的资源文件，渲染页面，完成。</li></ol><p>GET和POST两种基本请求方法的区别<br>最直观的区别就是GET把参数包含在URL中，POST通过request body传递参数。<br>GET在浏览器回退时是无害的，而POST会再次提交请求。<br>GET产生的URL地址可以被Bookmark，而POST不可以。<br>GET请求只能进行url编码，而POST支持多种编码方式。<br>GET请求参数会被完整保留在浏览器历史记录里，而POST中的参数不会被保留。<br>GET请求在URL中传送的参数是有长度限制的，而POST么有。<br>对参数的数据类型，GET只接受ASCII字符，而POST没有限制。<br>GET比POST更不安全，因为参数直接暴露在URL上，所以不能用来传递敏感信息。<br>GET参数通过URL传递，POST放在Request body中。</p><p>HTTP协议 超文本传输协议 Hyper Text Transfer Protocol<br>通常运行在TCP之上。它指定了客户端可能发送给服务器什么样的消息以及得到什么样的响应。</p><p>HTTP 返回状态码<br>1xx    信息，服务器收到请求，需要请求者继续执行操作；<br>2xx    成功，操作被成功接收并处理；<br>3xx    重定向，需要进一步的操作以完成请求；<br>　　例如，浏览器可能不得不请求服务器上的不同的页面，或通过代理服务器重复该请求。<br>4xx    客户端错误，请求包含语法错误或无法完成请求；<br>5xx    服务器错误，服务器在处理请求的过程中发生了错误；</p><p>100 - Continue 继续；初始的请求已经接受，客户应当继续发送请求的其余部分<br>101 - Switching Protocols 切换协议</p><p>200 - OK 正常；</p><p>301 - Moved Permanently 永久移动；<br>302 - Found 发现；　该资源原本确实存在，但已经被临时改变了位置</p><p>400 - Bad Request 错误请求；<br>　　请求出现语法错误<br>401 - Unauthorized 未授权；用户没有访问权限，需要进行身份认证。<br>403 - Forbidden 禁止访问；服务器理解客户的请求，但拒绝处理它。通常由于服务器上文件或目录的权限设置导致<br>404 - Not Found 找不到；</p><p>500 - Internal Server Error 服务器内部错误；<br>502 - Bad Gateway 错误的网关</p><pre><code>function count()&#123;    for (let i=0; i&lt;5; i++) &#123;        setTimeout(() =&gt; console.log(i), 1000*i)    &#125;&#125;</code></pre><p>什么是「闭包」。<br>「函数」和「函数内部能访问到的变量」的总和，就是一个闭包。<br>闭包就是能够读取其他函数内部变量的函数。例如在javascript中，只有函数内部的子函数才能读取局部变量，所以闭包可以理解成“定义在一个函数内部的函数“。在本质上，闭包是将函数内部和函数外部连接起来的桥梁。<br>「闭包」的作用是什么。</p><p>0.1 + 0.2 === 0.30000000000000004？<br>IEEE 754 浮点数编码方式<br>短浮点数 长浮点数<br>1 8 23   1 11 52 数符 阶码 尾数<br>-1的s次方乘1.m乘2的e-127/1023</p><p>key的作用主要是为了高效的更新虚拟DOM</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>T028 关于kmp</title>
      <link href="/2021/04/20/%E5%85%B6%E4%BB%96/Leetcode/2021-04-20-T28%E5%85%B3%E4%BA%8Ekmp/"/>
      <url>/2021/04/20/%E5%85%B6%E4%BB%96/Leetcode/2021-04-20-T28%E5%85%B3%E4%BA%8Ekmp/</url>
      
        <content type="html"><![CDATA[<h1 id="从朴素到kmp"><a href="#从朴素到kmp" class="headerlink" title="从朴素到kmp"></a>从朴素到kmp</h1><p>【             】<br>    【 i^ 】</p><pre><code>【    】   j^</code></pre><p>朴素设定两个指针，每次比较两者，若失配，则</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> kmp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>T122 关于set的upper_bound和lower_bound</title>
      <link href="/2021/04/17/%E5%85%B6%E4%BB%96/Leetcode/2021-04-17-T122%E5%85%B3%E4%BA%8Eset%E7%9A%84upper_bound%E5%92%8Clower_bound/"/>
      <url>/2021/04/17/%E5%85%B6%E4%BB%96/Leetcode/2021-04-17-T122%E5%85%B3%E4%BA%8Eset%E7%9A%84upper_bound%E5%92%8Clower_bound/</url>
      
        <content type="html"><![CDATA[<p>upper_bound(val)：返回以val为上界的元素的iterator（&gt;val的第一个数）<br>lower_bound(val)：返回以val为下界的元素的iterator（&gt;=val的第一个数）</p><span id="more"></span><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;<span class="number">10</span>; i++) myset.<span class="built_in">insert</span>(i*<span class="number">10</span>); <span class="comment">// 10 20 30 40 50 60 70 80 90</span></span><br><span class="line"></span><br><span class="line">itlow=myset.<span class="built_in">lower_bound</span> (<span class="number">30</span>);                <span class="comment">//    这里^</span></span><br><span class="line">itup=myset.<span class="built_in">upper_bound</span> (<span class="number">60</span>);                 <span class="comment">//                这里^</span></span><br><span class="line"></span><br><span class="line">myset.<span class="built_in">erase</span>(itlow,itup);                     <span class="comment">// 10 20 70 80 90</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> stl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>T208 关于前缀树(字典树、Trie)</title>
      <link href="/2021/04/14/%E5%85%B6%E4%BB%96/Leetcode/2021-04-14-T208%E5%85%B3%E4%BA%8E%E5%89%8D%E7%BC%80%E6%A0%91(%E5%AD%97%E5%85%B8%E6%A0%91%E3%80%81Trie)/"/>
      <url>/2021/04/14/%E5%85%B6%E4%BB%96/Leetcode/2021-04-14-T208%E5%85%B3%E4%BA%8E%E5%89%8D%E7%BC%80%E6%A0%91(%E5%AD%97%E5%85%B8%E6%A0%91%E3%80%81Trie)/</url>
      
        <content type="html"><![CDATA[<h1 id="字典树"><a href="#字典树" class="headerlink" title="字典树"></a>字典树</h1><p><img src="https://img-blog.csdn.net/20180823221048359?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTc3ODU3MA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70"></p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> 字典树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>T179 关于对vector使用sort、字符串拼接使最大</title>
      <link href="/2021/04/12/%E5%85%B6%E4%BB%96/Leetcode/2021-04-12-T179%E5%85%B3%E4%BA%8E%E5%AF%B9vector%E4%BD%BF%E7%94%A8sort%E3%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%8B%BC%E6%8E%A5%E4%BD%BF%E6%9C%80%E5%A4%A7/"/>
      <url>/2021/04/12/%E5%85%B6%E4%BB%96/Leetcode/2021-04-12-T179%E5%85%B3%E4%BA%8E%E5%AF%B9vector%E4%BD%BF%E7%94%A8sort%E3%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%8B%BC%E6%8E%A5%E4%BD%BF%E6%9C%80%E5%A4%A7/</url>
      
        <content type="html"><![CDATA[<h1 id="题目内容"><a href="#题目内容" class="headerlink" title="题目内容"></a>题目内容</h1><p>给定一组非负整数 nums，重新排列每个数的顺序（每个数不可拆分）使之组成一个最大的整数。</p><span id="more"></span><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>从朴素的例子来看，4在3前，32在31前，那么34和340相比呢，34和345相比呢？<br>其实不必如此细致的考虑所有情况。4在3前是因为43&gt;34，32在31前是因为3231&gt;3132，同样的，通过34340&gt;34034，34534&gt;34345可得34在340前，345在34前。<br>一般的，若判断a是否应在b前，只需ab&gt;ba即可（字符串意义上）。</p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">comp</span><span class="params">(string a, string b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.<span class="built_in">append</span>(b) &gt; b.<span class="built_in">append</span>(a);</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">    <span class="built_in">sort</span>(strs.<span class="built_in">begin</span>(),strs.<span class="built_in">end</span>(),comp);</span><br></pre></td></tr></table></figure><ul><li>自定义比较函数要static</li><li>对vector进行的sort：sort(myvector.begin(), myvector.end(), comp);</li></ul>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> stl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>T263、T264 关于set、priority_queue容器、动态规划、丑数</title>
      <link href="/2021/04/11/%E5%85%B6%E4%BB%96/Leetcode/2021-04-11-T263%E3%80%81T264%E5%85%B3%E4%BA%8Eset%E3%80%81priority_queue%E5%AE%B9%E5%99%A8%E3%80%81%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E3%80%81%E4%B8%91%E6%95%B0/"/>
      <url>/2021/04/11/%E5%85%B6%E4%BB%96/Leetcode/2021-04-11-T263%E3%80%81T264%E5%85%B3%E4%BA%8Eset%E3%80%81priority_queue%E5%AE%B9%E5%99%A8%E3%80%81%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E3%80%81%E4%B8%91%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="题目内容"><a href="#题目内容" class="headerlink" title="题目内容"></a>题目内容</h1><ul><li>丑数，就是只包含质因数 2、3 和/或 5 的正整数</li><li>T263 判断是否为丑数，注意特判0。不赘述</li><li>T264 输出第n个丑数</li></ul><span id="more"></span><h1 id="利用c-容器解T264"><a href="#利用c-容器解T264" class="headerlink" title="利用c++容器解T264"></a>利用c++容器解T264</h1><ul><li>“第n个”涉及排序和不重复</li><li>priority_queue解决排序；unordered_set解决不重复</li></ul><h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">unordered_set&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; myset;</span><br><span class="line">priority_queue&lt;<span class="keyword">long</span> <span class="keyword">long</span>, vector&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt;, greater&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; &gt; pq;</span><br></pre></td></tr></table></figure><h2 id="容器的方法"><a href="#容器的方法" class="headerlink" title="容器的方法"></a>容器的方法</h2><ul><li>priority_queue套：push(), pop(), top(), empty()</li><li>unordered_set套：add(), erase()<ul><li>if(myset.find(x)!=myset.end()) 则x不在myset内</li></ul></li></ul><h1 id="利用动态规划解T264"><a href="#利用动态规划解T264" class="headerlink" title="利用动态规划解T264"></a>利用动态规划解T264</h1><ul><li>$dp[1]=1$</li><li>定义三个指针 p2, p3, p5（px为使得dp[px] * x &gt; dp[i-1]的最小值）。初始时，三个指针的值都是 1</li><li>当 2 ≤ i ≤ n 时，令 $dp[i]=min{dp[p2]*2,dp[p3]*3,dp[p5]*5}$，然后分别比较$dp[i]$和$dp[p2]*2,dp[p3]*3,dp[p5]*5$是否相等，如果相等则将对应的指针加1。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> stl </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>T033、T081 二分查找、旋转数组</title>
      <link href="/2021/04/08/%E5%85%B6%E4%BB%96/Leetcode/2021-04-08-T33%E3%80%81T81%E5%85%B3%E4%BA%8E%E4%BA%8C%E5%88%86%E3%80%81%E6%97%8B%E8%BD%AC%E6%95%B0%E7%BB%84/"/>
      <url>/2021/04/08/%E5%85%B6%E4%BB%96/Leetcode/2021-04-08-T33%E3%80%81T81%E5%85%B3%E4%BA%8E%E4%BA%8C%E5%88%86%E3%80%81%E6%97%8B%E8%BD%AC%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<ul><li>一般二分、斐波那契分、两边都不管mi的写法</li><li>旋转数组：模拟</li></ul><span id="more"></span><h1 id="二分查找（以单调递增为例）"><a href="#二分查找（以单调递增为例）" class="headerlink" title="二分查找（以单调递增为例）"></a>二分查找（以单调递增为例）</h1><h2 id="初版"><a href="#初版" class="headerlink" title="初版"></a>初版</h2><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><ul><li>e &lt; x: 则e若存在必属于左侧子区间，故可（减除$s [ mi,hi )$并）递归深入$s[lo，mi)$</li><li>x &lt; e: 则e若存在必属于右侧子区间，亦可（减除$s [ lo,mi ]$并）递归深入$s(mi，hi)$</li><li>e = x: 已在此处命中，可随即返回<h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">static</span> Rank <span class="title">binarySearchA</span><span class="params">(T *S, <span class="keyword">const</span> T a, Rank lo, Rank hi)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">while</span> (lo &lt; hi)</span><br><span class="line">  &#123;</span><br><span class="line">    Rank mi = (lo + hi) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (a &lt; S[mi])       hi = mi;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (S[mi] &lt; a)  lo = mi;</span><br><span class="line">    <span class="keyword">else</span>                 <span class="keyword">return</span> mi;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="优化1：斐波那契查找"><a href="#优化1：斐波那契查找" class="headerlink" title="优化1：斐波那契查找"></a>优化1：斐波那契查找</h2><h4 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h4><ul><li>原版中，转向左、右分支前的关键码比较次数不等（左一次，右两次）</li><li>宁愿左边多递归几层来平衡一下</li><li>若有 $n = fib(k)-1$，则可取 $mi = fib(k-1)-1$，前、后子向量的长度分别为 $fib(k-1)-1$、$fib(k-2)-1$<h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">static</span> Rank <span class="title">fibSearch</span><span class="params">(T *S, <span class="keyword">const</span> T a, Rank lo, Rank hi)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (Fib <span class="built_in">fib</span>(hi - lo); lo &lt; hi;)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">// Rank mi = (lo + hi) &gt;&gt; 1;</span></span><br><span class="line">    <span class="keyword">while</span> (hi - lo &lt; fib.<span class="built_in">get</span>()) fib.<span class="built_in">prev</span>();</span><br><span class="line">    Rank mi = lo + fib.<span class="built_in">get</span>() - <span class="number">1</span>; <span class="comment">// 找到合适的轴点</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (a &lt; S[mi])       hi = mi;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (S[mi] &lt; a)  lo = mi;</span><br><span class="line">    <span class="keyword">else</span>                 <span class="keyword">return</span> mi;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="优化2：两分支的二分查找"><a href="#优化2：两分支的二分查找" class="headerlink" title="优化2：两分支的二分查找"></a>优化2：两分支的二分查找</h2><h4 id="原理-2"><a href="#原理-2" class="headerlink" title="原理"></a>原理</h4><ul><li>原版中，转向左、右分支前的关键码比较次数不等（左一次，右两次）</li><li>如果直接只比较一次，就没有这个问题了</li><li>e &lt;  x: 则e若存在必属于左侧子区间s[1o, mi)，故可递归深入</li><li>x &lt;= e: 则e若存在必属于右侧子区间s[mi, hi)，亦可递归深入</li><li>直到hi - lo = 1，才判断是否命中<h5 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">static</span> Rank <span class="title">binarySearchB</span><span class="params">(T *S, <span class="keyword">const</span> T a, Rank lo, Rank hi)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">while</span> (<span class="number">1</span> &lt; hi - lo)</span><br><span class="line">  &#123;</span><br><span class="line">    Rank mi = (lo + hi) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    a &lt; S[mi] ? hi = mi : lo = mi;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> a == S[lo] ? lo : <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="优化3：两边都嫌弃mi的两分支二分查找"><a href="#优化3：两边都嫌弃mi的两分支二分查找" class="headerlink" title="优化3：两边都嫌弃mi的两分支二分查找"></a>优化3：两边都嫌弃mi的两分支二分查找</h2><h4 id="原理-3"><a href="#原理-3" class="headerlink" title="原理"></a>原理</h4><ul><li>转入右侧子向量时，左边界取mi+1（而非mi）<h4 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">static</span> Rank <span class="title">binarySearchC</span><span class="params">(T *S, <span class="keyword">const</span> T a, Rank lo, Rank hi)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">while</span> (hi &lt; lo)</span><br><span class="line">  &#123;</span><br><span class="line">    Rank mi = (lo + hi) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    a &lt; S[mi] ? hi = mi : lo = mi + <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> lo - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4></li></ul><ol><li><p>两边都不要mi，那如果mi命中了怎么办？<br>答：mi如果命中，那后边的查找都是白忙活，本质就是等结束。但是在白忙活的过程中，lo是不会变的，因为每次查找都会发现target小了，得在左侧子向量找。这样，lo就被保留下来了。最后返回的lo-1不就是刚开始的mi吗，没毛病。</p></li><li><p>那mi没有命中怎么办？（指target比mi大而比mi+1小），这样返回mi没问题吗？<br>答：没问题。须知，查找的语义约定为：查找e，返回不大于e且秩最大的元素。这种写法是符合语义约定的，之前的各种失败返回-1的算法反而不符合。</p></li></ol><h1 id="二分·旋转数组"><a href="#二分·旋转数组" class="headerlink" title="二分·旋转数组"></a>二分·旋转数组</h1><ul><li>旋转数组：升序向量，截取前边一段接到后边<h2 id="T31-旋转向量元素不重复"><a href="#T31-旋转向量元素不重复" class="headerlink" title="T31 旋转向量元素不重复"></a>T31 旋转向量元素不重复</h2></li></ul><h2 id="T81-旋转向量元素可重复"><a href="#T81-旋转向量元素可重复" class="headerlink" title="T81 旋转向量元素可重复"></a>T81 旋转向量元素可重复</h2><h2 id="T153"><a href="#T153" class="headerlink" title="T153"></a>T153</h2>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> 模拟 </tag>
            
            <tag> 二分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL自学</title>
      <link href="/2020/05/10/%E5%85%B6%E4%BB%96/%E5%90%8E%E7%AB%AF/%E6%95%B0%E6%8D%AE%E5%BA%93/SQL%E8%87%AA%E5%AD%A6/"/>
      <url>/2020/05/10/%E5%85%B6%E4%BB%96/%E5%90%8E%E7%AB%AF/%E6%95%B0%E6%8D%AE%E5%BA%93/SQL%E8%87%AA%E5%AD%A6/</url>
      
        <content type="html"><![CDATA[<p>请列出所有电影的ID,名称和出版国(即美国) ✓</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ID,TITLE, <span class="string">&#x27;美国&#x27;</span> <span class="keyword">AS</span> COUNTRY</span><br><span class="line"><span class="keyword">FROM</span> MOVIES</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《数据库系统实现》笔记</title>
      <link href="/2020/05/09/%E5%85%B6%E4%BB%96/%E5%90%8E%E7%AB%AF/%E6%95%B0%E6%8D%AE%E5%BA%93/%E3%80%8A%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E5%AE%9E%E7%8E%B0%E3%80%8B%E7%AC%94%E8%AE%B0/"/>
      <url>/2020/05/09/%E5%85%B6%E4%BB%96/%E5%90%8E%E7%AB%AF/%E6%95%B0%E6%8D%AE%E5%BA%93/%E3%80%8A%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E5%AE%9E%E7%8E%B0%E3%80%8B%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h1><p>数据如何组织在磁盘上</p><span id="more"></span><h2 id="2-5-组织磁盘上的数据"><a href="#2-5-组织磁盘上的数据" class="headerlink" title="2.5 组织磁盘上的数据"></a>2.5 组织磁盘上的数据</h2><h3 id="2-5-1-定长记录"><a href="#2-5-1-定长记录" class="headerlink" title="2.5.1 定长记录"></a>2.5.1 定长记录</h3><p>记录存在辅存中，但对记录的操作仍需在内存中执行<br>当数据的开始地址是4或8的倍数时，内存读写更效率</p><p>记录以记录的<strong>首部</strong>开始，首部是关于记录自身信息的一个定长区域<br>我们可能要在记录中保存如下信息：</p><ul><li>一个指向该记录中存储数据的模式的指针</li><li>记录长度</li><li>时间戳，记录最后一次被修改或被读的时间</li><li>指向记录的字段的指针</li></ul><h3 id="2-5-2-定长记录在块中的位置"><a href="#2-5-2-定长记录在块中的位置" class="headerlink" title="2.5.2 定长记录在块中的位置"></a>2.5.2 定长记录在块中的位置</h3><p>存储记录的块的格式:<br>| 块首部 | 记录1 | 记录2 | …     | 记录n | 剩余空间 |<br>| — | — | — | — | — | — |</p><p><strong>块首部（可选）</strong>，存储以下信息：</p><ol><li>与一个或多个其他块的链接，这些块构成一个块的网络</li><li>块在网络中扮演的角色</li><li>块的元组属于哪个关系</li><li>每条记录在块内偏移量的“目录”</li><li>块最后一次修改/存取时间的时间戳</li></ol><h2 id="2-6-块和记录地址的表示"><a href="#2-6-块和记录地址的表示" class="headerlink" title="2.6 块和记录地址的表示"></a>2.6 块和记录地址的表示</h2><h3 id="2-6-1-客户机-服务器系统中的地址"><a href="#2-6-1-客户机-服务器系统中的地址" class="headerlink" title="2.6.1 客户机-服务器系统中的地址"></a>2.6.1 客户机-服务器系统中的地址</h3>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式</title>
      <link href="/2020/05/07/%E5%B7%A5%E5%85%B7/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/2020/05/07/%E5%B7%A5%E5%85%B7/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let testRegex = <span class="regexp">/Code/</span></span><br><span class="line">testRegex.test(testStr);</span><br><span class="line"><span class="regexp">//</span> Returns true</span><br></pre></td></tr></table></figure><ul><li><p>使用<kbd>|</kbd>匹配多个规则</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">/yes|no|maybe/</span></span><br></pre></td></tr></table></figure></li><li><p>使用<kbd>i</kbd>忽略大小写</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">/ignorecase/i</span></span><br></pre></td></tr></table></figure></li><li><p>.match()方法提取匹配项</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let ourStr = <span class="string">&quot;Regular expressions&quot;</span>;</span><br><span class="line">let ourRegex = <span class="regexp">/expressions/</span>;</span><br><span class="line">ourStr.match(ourRegex);</span><br><span class="line"><span class="regexp">//</span> Returns [<span class="string">&quot;expressions&quot;</span>]</span><br></pre></td></tr></table></figure></li><li><p>使用<kbd>g</kbd>多次匹配</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let repeatRegex = <span class="regexp">/Repeat/g</span>;</span><br><span class="line">testStr.match(repeatRegex);</span><br><span class="line"><span class="regexp">//</span> Returns [<span class="string">&quot;Repeat&quot;</span>, <span class="string">&quot;Repeat&quot;</span>, <span class="string">&quot;Repeat&quot;</span>]</span><br></pre></td></tr></table></figure></li><li><p>使用<kbd>.</kbd>匹配任意一个字符</p></li><li><p>使用<kbd>[]</kbd>单个字符匹配多种可能性</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">/b[aiu]g/</span></span><br></pre></td></tr></table></figure></li><li><p>使用<kbd>-</kbd>单个字符匹配连续范围</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">/[a-e]at/</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node.js笔记</title>
      <link href="/2020/05/07/%E5%85%B6%E4%BB%96/%E5%89%8D%E7%AB%AF/node-js%E7%AC%94%E8%AE%B0/"/>
      <url>/2020/05/07/%E5%85%B6%E4%BB%96/%E5%89%8D%E7%AB%AF/node-js%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="node-js的REPL"><a href="#node-js的REPL" class="headerlink" title="node.js的REPL"></a>node.js的REPL</h1><ul><li>简单运算</li><li>使用变量<ul><li>var: 不显示（undefined）</li><li>不适用var: 直接显示结果</li></ul></li><li>支持多行表达式</li><li>下划线<kbd>_</kbd>获取上一个表达式的运算结果</li><li>ctrl + c - 退出当前终端</li><li>向上/向下键 - 查看输入的历史命令</li><li>tab 键 - 列出当前命令</li><li>.help</li><li>.break</li><li>.save + filename</li><li>.load + filename</li></ul><h1 id="node-js-回调函数"><a href="#node-js-回调函数" class="headerlink" title="node.js 回调函数"></a>node.js 回调函数</h1>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解Java虚拟机笔记</title>
      <link href="/2020/05/05/%E5%85%B6%E4%BB%96/%E5%90%8E%E7%AB%AF/Java/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%AC%94%E8%AE%B0/"/>
      <url>/2020/05/05/%E5%85%B6%E4%BB%96/%E5%90%8E%E7%AB%AF/Java/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="第二章-Java内存区域与内存溢出异常"><a href="#第二章-Java内存区域与内存溢出异常" class="headerlink" title="第二章 Java内存区域与内存溢出异常"></a>第二章 Java内存区域与内存溢出异常</h1><h2 id="2-2-运行时数据区域"><a href="#2-2-运行时数据区域" class="headerlink" title="2.2 运行时数据区域"></a>2.2 运行时数据区域</h2><ul><li><p>程序计数器：</p><ul><li>当前线程所执行的字节码的行号指示器</li><li>线程私有</li></ul></li><li><p>Java虚拟机栈：</p><ul><li>虚拟机执行Java方法（字节码）服务</li><li>栈帧：每个方法被执行，Java虚拟机都会创建一个栈帧用于存储局部变量表、操作数栈、动态连接、方法出口等信息。每一个方法被调用直至执行完毕的过程，就对应着一个栈帧在虚拟机栈中从入栈到出栈的过程</li><li>线程私有</li></ul></li><li><p>本地方法栈：</p><ul><li>虚拟机使用到的本地方法服务</li></ul></li><li><p>Java堆</p><ul><li>被所有线程共享</li><li>存放对象实例</li><li>是垃圾收集器管理的内存区域</li></ul></li><li><p>方法区</p><ul><li>被所有线程共享</li></ul></li><li><p>运行时常量池</p><ul><li>属于方法区</li><li>常量不一定要在编译时放入</li></ul></li><li><p>直接内存</p><ul><li>不属于Java虚拟机运行时数据区，不在虚拟机内存</li><li>只受本机内存限制</li></ul></li></ul><h2 id="2-3-HotSpot虚拟机对象探秘"><a href="#2-3-HotSpot虚拟机对象探秘" class="headerlink" title="2.3 HotSpot虚拟机对象探秘"></a>2.3 HotSpot虚拟机对象探秘</h2><ul><li><p>创建</p><ul><li>【类加载检查】当Java虚拟机遇到一条字节码new指令时，首先将去检查这个指令的参数是否能在常量池中定位到 一个类的符号引用，并且检查这个符号引用代表的类是否已被加载、解析和初始化过。如果没有，那 必须先执行相应的类加载过程</li><li>【分配内存：指针碰撞/空闲列表】虚拟机将为新生对象分配内存。对象所需内存的大小在类加载完成 后便可完全确定。为对象分配空间的任务实际上便等同于把一块确定 大小的内存块从Java堆中划分出来。假设Java堆中内存是绝对规整的，所有被使用过的内存都被放在一 边，空闲的内存被放在另一边，中间放着一个指针作为分界点的指示器，那所分配内存就仅仅是把那 个指针向空闲空间方向挪动一段与对象大小相等的距离，这种分配方式称为“指针碰撞”。但如果Java堆中的内存并不是规整的，已被使用的内存和空闲的内存相互交错在一起，那 就没有办法简单地进行指针碰撞了，虚拟机就必须维护一个列表，记录上哪些内存块是可用的，在分 配的时候从列表中找到一块足够大的空间划分给对象实例，并更新列表上的记录，这种分配方式称 为“空闲列表”</li></ul></li><li><p>对象的内存布局</p><ul><li>对象头</li><li>实例数据</li><li>对齐填充</li></ul></li><li><p>对象的访问定位</p><ul><li>句柄访问</li><li>直接指针访问</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 《深入理解Java虚拟机》 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>latex学习</title>
      <link href="/2020/04/03/%E5%B7%A5%E5%85%B7/latex%E5%AD%A6%E4%B9%A0/"/>
      <url>/2020/04/03/%E5%B7%A5%E5%85%B7/latex%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>$\Gamma$、$\iota$、$\sigma$、$\phi$、$\upsilon$、$\Pi$、$\Bbbk$、$\heartsuit$、$\int$、$\oint$</p><p>$\tan$、$\sin$、$\cos$、$\lg$、$\arcsin$、$\arctan$、$\min$、$\max$、$\exp$、$\log$</p><p>$+$、$-$、$=$、$&gt;$、$&lt;$、$\times$、$\div$、$\equiv$、$\leq$、$\geq$、$\neq$  </p><p>$\cup$、$\cap$、$\in$、$\notin$、$\ni$、$\subset$、$\subseteq$、$\supset$、$\supseteq$、$\infty$</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$\Gamma$、$\iota$、$\sigma$、$\phi$、$\upsilon$、$\Pi$、$\Bbbk$、$\heartsuit$、$\int$、$\oint$</span><br><span class="line"></span><br><span class="line">$\tan$、$\sin$、$\cos$、$\lg$、$\arcsin$、$\arctan$、$\min$、$\max$、$\exp$、$\log$</span><br><span class="line"></span><br><span class="line">$+$、$-$、$=$、$&gt;$、$&lt;$、$\times$、$\div$、$\equiv$、$\leq$、$\geq$、$\neq$  </span><br><span class="line"></span><br><span class="line">$\cup$、$\cap$、$\in$、$\notin$、$\ni$、$\subset$、$\subseteq$、$\supset$、$\supseteq$、$\infty$</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>tex学习笔记</title>
      <link href="/2020/03/05/%E5%B7%A5%E5%85%B7/tex%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2020/03/05/%E5%B7%A5%E5%85%B7/tex%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="整体框架"><a href="#整体框架" class="headerlink" title="整体框架"></a>整体框架</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">\documentclass&#123;article&#125;</span><br><span class="line">% 这里是导言区</span><br><span class="line">\begin&#123;document&#125;</span><br><span class="line">% 内容</span><br><span class="line">\end&#123;document&#125;</span><br></pre></td></tr></table></figure><h2 id="导言区"><a href="#导言区" class="headerlink" title="导言区"></a>导言区</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">\title&#123;你好，world!&#125;</span><br><span class="line">\author&#123;Liam&#125;</span><br><span class="line">\date&#123;\today&#125;</span><br><span class="line">\begin&#123;document&#125;</span><br></pre></td></tr></table></figure><h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">% 将导言区标题、作者、日期按照格式展现</span><br><span class="line">\maketitle</span><br><span class="line">% 目录</span><br><span class="line">\tableofcontents</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">\section&#123;·&#125;</span><br><span class="line">\subsection&#123;·&#125;</span><br><span class="line">\subsubsection&#123;·&#125;</span><br><span class="line">\paragraph&#123;·&#125;</span><br><span class="line">\subparagraph&#123;·&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java程序设计01</title>
      <link href="/2020/02/22/%E5%85%B6%E4%BB%96/%E5%90%8E%E7%AB%AF/Java/Java%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A101/"/>
      <url>/2020/02/22/%E5%85%B6%E4%BB%96/%E5%90%8E%E7%AB%AF/Java/Java%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A101/</url>
      
        <content type="html"><![CDATA[<p>笔记至第3章【完】</p><span id="more"></span><p>课程重点：</p><ul><li>类</li><li>集合  </li><li>图形用户界面</li><li>文件操作</li><li>多线程</li><li>数据库</li></ul><h2 id="第一章-Java程序设计概述"><a href="#第一章-Java程序设计概述" class="headerlink" title="第一章 Java程序设计概述"></a>第一章 Java程序设计概述</h2><h3 id="命令行执行Java程序"><a href="#命令行执行Java程序" class="headerlink" title="命令行执行Java程序"></a>命令行执行Java程序</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">javac Test.java   //java compile 编译java程序 .java-&gt;.class</span><br><span class="line">java Test    //运行java程序 </span><br></pre></td></tr></table></figure><h2 id="第二章-Java语言基础"><a href="#第二章-Java语言基础" class="headerlink" title="第二章 Java语言基础"></a>第二章 Java语言基础</h2><h3 id="标识符和关键字"><a href="#标识符和关键字" class="headerlink" title="标识符和关键字"></a>标识符和关键字</h3><p>标识符：首字符必须是字母、下划线或美元符号$，后面可跟字母、数字、下划线和美元符号$。</p><p>关键字:Java预定义的单词。</p><ol><li>包(package)：用于将完成不同功能的类分门别类，放在不同的目录(包)下，包的命名规则：将公司域名反转作为包名。比如<a href="http://www.baidu.com/">www.baidu.com</a> 对于包名：每个字母都需要小写。比如：com.baidu.test;该包下的Test类的全名是：com.baidu.Test.java 。</li></ol><p> <br>如果定义类的时候没有使用package,那么java就认为我们所定义的类位于默认包里面(default package)。<br> <br>2. 类：每个单词的首字母都大写，不使用连接符<br> <br>3. 方法：首单词小写，第二个单词起首字母大写，不使用连接符<br> <br>4. 属性：首单词小写，第二个单词起首字母大写，不使用连接符<br> <br>5. 常量：所有字母大写，下划线链接单词</p><h3 id="基本数据类型、变量、常量"><a href="#基本数据类型、变量、常量" class="headerlink" title="基本数据类型、变量、常量"></a>基本数据类型、变量、常量</h3><h4 id="符号常量"><a href="#符号常量" class="headerlink" title="符号常量"></a>符号常量</h4><p>用<kbd>final</kbd>声明符号常量<br>表示这个变量只能被赋值一次，一旦赋值后就不能够再更改。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// final 数据类型 常量名 = 缺省值;</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> STUDENT_NUM = <span class="number">10</span>;</span><br></pre></td></tr></table></figure><p>习惯上，符号常量名采用全部<strong>大写</strong>，词与词之间用<strong>下划线</strong>分隔。</p><h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><p>变量形式：maMuMu。一般不使用下划线。</p><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><p><kbd>&&</kbd>是短路与，<kbd>||</kbd>是短路或<br><kbd>&</kbd>是逻辑与，<kbd>|</kbd>是逻辑或</p><h3 id="表达式的类型转换"><a href="#表达式的类型转换" class="headerlink" title="表达式的类型转换"></a>表达式的类型转换</h3><p>将长的类型赋予较短的类型要先强制类型转换</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> x = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">int</span> y = (<span class="keyword">int</span>) x;</span><br></pre></td></tr></table></figure><h3 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h3><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p><strong>函数</strong>=<strong>方法</strong>=<strong>模块化设计</strong><br>Java中所有的方法都必须封装在类中，不能单独出现、使用。</p><h4 id="方法的定义"><a href="#方法的定义" class="headerlink" title="方法的定义"></a>方法的定义</h4><p>Java中方法定义的基本格式为：<br>[修饰符] 返回值类型 方法名([形式参数列表]){<br>    [方法体]<br>}<br>修饰符：定义方法在类中的存在属性（如公有/私有、是否可以被重载等）</p><h4 id="方法的重载"><a href="#方法的重载" class="headerlink" title="方法的重载"></a>方法的重载</h4><p>重载只与参数有关，与返回值无关</p><ul><li>参数的类型不同</li><li>参数的个数不同</li></ul><h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Scanner input = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">double</span> r,perimeter,area;</span><br><span class="line">        System.out.print(<span class="string">&quot;Please enter a radius for a circle: &quot;</span>);</span><br><span class="line">        <span class="comment">// System.out.println是输出并换行 print不换行</span></span><br><span class="line">        r = input.nextDouble();</span><br><span class="line">        input.close();</span><br><span class="line">        <span class="comment">//记得关闭输入</span></span><br><span class="line">        perimeter = <span class="number">2</span>*Math.PI*r;</span><br><span class="line">        area = Math.PI*r*r;</span><br><span class="line">        System.out.print(<span class="string">&quot;The perimeter is &quot;</span>+ perimeter+<span class="string">&quot; and the area is &quot;</span>+area);</span><br><span class="line">        <span class="comment">// “+”将变量值转换为字符串</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;abc&quot;</span> + <span class="number">7</span> + <span class="number">2</span>)</span><br></pre></td></tr></table></figure><blockquote><p>输出 abc72</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="number">7</span> + <span class="number">2</span> +<span class="string">&quot;abc&quot;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>输出 9abc</p></blockquote><h2 id="第三章-数组"><a href="#第三章-数组" class="headerlink" title="第三章 数组"></a>第三章 数组</h2><h3 id="数组的声明、创建、引用"><a href="#数组的声明、创建、引用" class="headerlink" title="数组的声明、创建、引用"></a>数组的声明、创建、引用</h3><p>Java中的数组是对象，属于引用类型。</p><p>法一：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] myArray;</span><br><span class="line">myArray = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>];</span><br></pre></td></tr></table></figure><p>法二：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] myArray = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>];</span><br></pre></td></tr></table></figure><p>法三 <strong>匿名数组</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;</span><br></pre></td></tr></table></figure><p>用于函数的实参等</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> sum = getSum(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;);</span><br></pre></td></tr></table></figure><p>数组的属性<kbd>length</kbd>，存储数组元素的个数</p><p>Java能自动检查数组是否越界</p><h4 id="一维数组"><a href="#一维数组" class="headerlink" title="一维数组"></a>一维数组</h4><h4 id="不定长参数与数组"><a href="#不定长参数与数组" class="headerlink" title="不定长参数与数组"></a>不定长参数与数组</h4><p>某些方法的参数个数事先无法确定。<br>可使用数组参数</p><ul><li>不定长形参只能处于形参列表的最后</li><li>一个方法只能包含一个不定长参数<br>法一<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(String... args)</span></span>;</span><br></pre></td></tr></table></figure>法二<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(String[] args)</span></span>;</span><br></pre></td></tr></table></figure></li></ul><h4 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h4><ul><li>规则二维数组</li><li>不规则二维数组</li></ul><h5 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[][] myArray;</span><br></pre></td></tr></table></figure><h5 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myArray = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>][<span class="number">3</span>];</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myArray = <span class="keyword">new</span> <span class="keyword">int</span>[][]&#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myArray = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;&#125;;</span><br></pre></td></tr></table></figure><h5 id="不规则二维数组"><a href="#不规则二维数组" class="headerlink" title="不规则二维数组"></a>不规则二维数组</h5><p>创建二维数组对象可以进行动态分配</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[][] b = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>][];</span><br><span class="line">b[<span class="number">0</span>] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br><span class="line">b[<span class="number">1</span>] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>];</span><br></pre></td></tr></table></figure><h3 id="for-each循环"><a href="#for-each循环" class="headerlink" title="for each循环"></a>for each循环</h3><p>用于遍历数组元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ( 数据类型 迭代变量: 数组 )&#123;</span><br><span class="line">    ···</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span>[] rows:twoDArray)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> element:rows)&#123;</span><br><span class="line">        ···</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Arrays类"><a href="#Arrays类" class="headerlink" title="Arrays类"></a>Arrays类</h3><h4 id="Arrays-sort-int-a"><a href="#Arrays-sort-int-a" class="headerlink" title="Arrays.sort(int[] a)"></a>Arrays.sort(int[] a)</h4><p>优化的快速排序方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Array.sort(myArray);</span><br><span class="line">System.out.println(Array.toString(myArray));</span><br></pre></td></tr></table></figure><h4 id="copyOf-方法"><a href="#copyOf-方法" class="headerlink" title="copyOf()方法"></a>copyOf()方法</h4><p>实现数组复制<br>得到的是一个新的数组对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">copyOf(<span class="keyword">int</span>[] myArray,<span class="keyword">int</span> length)</span><br><span class="line">或</span><br><span class="line">copyOf(<span class="keyword">int</span>[] myArray, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span><br></pre></td></tr></table></figure><h4 id="Arrays-binarySearch-int-a-int-key-方法：折半查找"><a href="#Arrays-binarySearch-int-a-int-key-方法：折半查找" class="headerlink" title="Arrays.binarySearch(int[] a,int key)方法：折半查找"></a>Arrays.binarySearch(int[] a,int key)方法：折半查找</h4><h4 id="equals"><a href="#equals" class="headerlink" title="equals"></a>equals</h4><h3 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h3><p>显示成绩方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;  <span class="comment">//显示成绩</span></span><br><span class="line">    System.out.print(<span class="string">&quot;\t&quot;</span>);  <span class="comment">//留出显示姓名的位置</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;courses.length; i++)&#123;<span class="comment">//输出课程名称</span></span><br><span class="line">        System.out.print(courses[i]+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;score.length; i++)&#123;</span><br><span class="line">        <span class="comment">//显示学生姓名</span></span><br><span class="line">        System.out.print(students[i]+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">        <span class="comment">//显示该学生成绩</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;score[i].length; j++)&#123;</span><br><span class="line">            System.out.print(score[i][j]+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">字符串比较方法：&lt;kbd&gt;equalsIgnoreCase()&lt;/kbd&gt;</span><br><span class="line"></span><br><span class="line">控制台命令的读取和控制</span><br><span class="line">```<span class="function">java</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Scanner scn=<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;请输入命令:&quot;</span>);</span><br><span class="line">        String command=scn.next();</span><br><span class="line">        <span class="keyword">if</span>(command.equalsIgnoreCase(<span class="string">&quot;avg&quot;</span>))&#123;<span class="comment">//&quot;avg&quot;命令需要一个参数</span></span><br><span class="line">            String parameter=scn.next();</span><br><span class="line">            avg(parameter);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(command.equalsIgnoreCase(<span class="string">&quot;get&quot;</span>))&#123;<span class="comment">//&quot;get&quot;命令需要两个参数</span></span><br><span class="line">            String parameter1=scn.next();</span><br><span class="line">            String parameter2=scn.next();</span><br><span class="line">            get(parameter1,parameter2);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(command.equalsIgnoreCase(<span class="string">&quot;sort&quot;</span>))&#123;<span class="comment">//&quot;sort&quot;命令需要一个参数</span></span><br><span class="line">            String parameter=scn.next();</span><br><span class="line">            sortByScore(parameter);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (command.equalsIgnoreCase(<span class="string">&quot;exit&quot;</span>))&#123;<span class="comment">//退出查询系统</span></span><br><span class="line">            System.out.println(<span class="string">&quot;退出查询系统！byebye！&quot;</span>);</span><br><span class="line">            System.exit(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查询某人某门课成绩</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">get(String[] students, String[] courses)&#123;</span><br><span class="line">    ···</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>徐涛思修01</title>
      <link href="/2020/02/22/%E6%94%BF%E6%B2%BB/%E5%BE%90%E6%B6%9B%E6%80%9D%E4%BF%AE01/"/>
      <url>/2020/02/22/%E6%94%BF%E6%B2%BB/%E5%BE%90%E6%B6%9B%E6%80%9D%E4%BF%AE01/</url>
      
        <content type="html"><![CDATA[<p>更新至第一章 理想信念</p><span id="more"></span><h1 id="思想道德修养和法律基础"><a href="#思想道德修养和法律基础" class="headerlink" title="思想道德修养和法律基础"></a>思想道德修养和法律基础</h1><ul><li><strong>思想修养</strong><ul><li>理想信念——第①章</li><li>中国精神（以爱国主义为核心的民族精神、以改革创新为核心的时代精神）——第②章</li><li>人生价值——第③章</li></ul></li><li><strong>道德修养</strong><ul><li>基本要素（概念、特点、形成、作用等）——第④章</li><li>各个方面道德体现（公共生活中的社会公德、家庭生活中的家庭美德、工作生活中的职业道德、个人修养中的个人品德）——第⑤章</li></ul></li><li>法律基础——第⑥~⑧章</li></ul><h2 id="绪论"><a href="#绪论" class="headerlink" title="绪论"></a>绪论</h2><h3 id="考点1（非重点）-思想道德与法律的关系"><a href="#考点1（非重点）-思想道德与法律的关系" class="headerlink" title="考点1（非重点） 思想道德与法律的关系"></a>考点1（非重点） 思想道德与法律的关系</h3><ol><li>道德为法律提供价值基础  </li><li>法律为道德提供制度保障</li><li>需要法律和道德共同发挥作用</li></ol><h3 id="考点2（非重点）-社会主义核心价值观的基本内容"><a href="#考点2（非重点）-社会主义核心价值观的基本内容" class="headerlink" title="考点2（非重点） 社会主义核心价值观的基本内容"></a>考点2（非重点） 社会主义核心价值观的基本内容</h3><ol><li>国家层面：富强 民主 文明 和谐</li><li>社会层面：自由 平等 公正 法治</li><li>公民层面：爱国 敬业 诚信 友善</li></ol><h3 id="考点3（非重点）-培育和践行社会主义核心价值观的重大意义"><a href="#考点3（非重点）-培育和践行社会主义核心价值观的重大意义" class="headerlink" title="考点3（非重点） 培育和践行社会主义核心价值观的重大意义"></a>考点3（非重点） 培育和践行社会主义核心价值观的重大意义</h3><ol><li>价值支撑</li><li>精神动力</li><li>根本方针</li></ol><h2 id="第一章-理想信念"><a href="#第一章-理想信念" class="headerlink" title="第一章 理想信念"></a>第一章 理想信念</h2><h3 id="考点4（选择题重点）-理想信念的含义、特征与作用"><a href="#考点4（选择题重点）-理想信念的含义、特征与作用" class="headerlink" title="考点4（选择题重点） 理想信念的含义、特征与作用"></a>考点4（选择题重点） 理想信念的含义、特征与作用</h3><h4 id="理想的含义"><a href="#理想的含义" class="headerlink" title="理想的含义"></a>理想的含义</h4><p>理想作为一种社会意识和精神现象，是人类社会实践的产物。理想是人们在实践中形成的、有实现可能性的、对未来社会和自身发展的向往与追求，是人们的世界观、人生观和价值观在奋斗目标上的集中体现。 </p><p>（<strong>理想属于社会意识</strong>)</p><h4 id="理想的特点"><a href="#理想的特点" class="headerlink" title="理想的特点"></a>理想的特点</h4><ol><li>理想带有时代的烙印。在阶级社会中，还必然带着特定阶级的烙印。<br>（<strong>理想属于社会意识形态</strong>）</li><li>理想源于现实，又超越现实。    </li><li>理想是多方面和多类型的。①从性质上划分，有科学理想和非科学理想；②从时序上划分，有长远理想和近期理想等；③从主体上划分，有个人理想和社会理想等；④从内容上划分，有社会政治理想、道德理想、职业理想和生活理想等。</li><li>理想不仅具有<strong>现实性</strong>，而且具有<strong>预见性</strong>。一方面，理想是人们一定社会实践的产物，同时它又超越了今天的实践；另一方面，理想必须通过人们的实践活动才能实现，同时它又指明了进一步实践的方向。 </li></ol><h4 id="信念"><a href="#信念" class="headerlink" title="信念"></a>信念</h4><ol><li>信念同理想一样，也是人类特有的一种<strong>精神现象</strong>。（<strong>信念属于社会意识</strong>）</li><li>信念具有高于一般认识的<strong>稳定性</strong>，人们的某种信念一旦形成，就不会轻易改变。然而信念的稳定性也不是绝对的，科学的信念必然会随着客观实际的改变而与时俱进，不断充实、调整和完善</li><li>信念有不同的内涵，也有不同的层次。其中，<strong>高层次</strong>的信念<strong>决定</strong>着<strong>低层次</strong>的信念，<strong>低层次</strong>的信念<strong>服从</strong>于<strong>高层次</strong>的信念；由于最高层次的信念具有最大的统摄力，因而它就代表了一个人的基本社会<strong>信仰</strong>。信仰是信念最集中、最高的表现形式。</li><li>理想是信念的<strong>根据和前提</strong>，信念则是理想实现的<strong>重要保障</strong>。 </li></ol><h4 id="理想信念的作用"><a href="#理想信念的作用" class="headerlink" title="理想信念的作用"></a>理想信念的作用</h4><ol><li>指引人生的奋斗目标。</li><li>提供人生的前进动力。</li><li>提高人生的精神境界。</li></ol><h3 id="考点5（选择题重点）-确立马克思主义的科学信仰"><a href="#考点5（选择题重点）-确立马克思主义的科学信仰" class="headerlink" title="考点5（选择题重点） 确立马克思主义的科学信仰"></a>考点5（选择题重点） 确立马克思主义的科学信仰</h3><h4 id="为什么要确立马克思主义的科学信仰？"><a href="#为什么要确立马克思主义的科学信仰？" class="headerlink" title="为什么要确立马克思主义的科学信仰？"></a>为什么要确立马克思主义的科学信仰？</h4><p>因为马克思主义是科学的、崇高的、具有持久生命力的、实践的</p><p><strong>科学的</strong>——因为它揭示了人类社会的发展规律<br><strong>崇高的</strong>——因为它以解放全人类为己任<br><strong>具有持久生命力</strong>——因为它与时俱进<br><strong>实践的</strong>——因为它以改造世界为己任</p><h3 id="考点6（选择题）-树立中国特色社会主义的共同理想"><a href="#考点6（选择题）-树立中国特色社会主义的共同理想" class="headerlink" title="考点6（选择题） 树立中国特色社会主义的共同理想"></a>考点6（选择题） 树立中国特色社会主义的共同理想</h3><p>建设和发展中国特色社会主义、实现中华民族伟大复兴，是现阶段我国各族人民的<strong>共同理想</strong></p><h4 id="如何实现"><a href="#如何实现" class="headerlink" title="如何实现"></a>如何实现</h4><ol><li>坚定对中国共产党的信任</li><li>坚定走中国特色社会主义道路的信念</li><li>坚定实现中华民族伟大复兴的信心</li></ol><h3 id="考点7（选择题重点）-正确理解理想和现实的关系"><a href="#考点7（选择题重点）-正确理解理想和现实的关系" class="headerlink" title="考点7（选择题重点）  正确理解理想和现实的关系"></a>考点7（选择题重点）  正确理解理想和现实的关系</h3><p>现实是理想的基础，理想是未来的现实。<br>一方面，现实中包含着理想的因素，孕育着理想。在一定条件下，现实必定要转化为理想；<br>另一方面，理想中也包含着现实，既包含着现实中必然发展的因素，又包含着由理想转化为现实的条件。在一定条件下，理想可以转化成未来的现实。<br>艰苦奋斗是实现理想的<strong>重要条件</strong>（不是根本条件。根本条件是实践）</p><h3 id="✨考点8（分析题重点）-坚持个人理想与社会理想的统一"><a href="#✨考点8（分析题重点）-坚持个人理想与社会理想的统一" class="headerlink" title="✨考点8（分析题重点） 坚持个人理想与社会理想的统一"></a>✨考点8（分析题重点） 坚持个人理想与社会理想的统一</h3><p>1.<strong>社会理想****规定</strong>、指引着<strong>个人理想</strong>。个人理想只有同国家的前途、民族的命运相结合，个人的向往和追求只有同社会的需要和人民的利益相一致，才可能变为现实。<br>2.<strong>社会理想</strong>是对社会成员<strong>个人理想</strong>的<strong>凝练和升华</strong>。社会理想是对社会成员个人理想的凝练和升华。社会是个人的联合体，社会理想与个人理想密不可分。社会理想不是凭空产生的，也不是由外在力量强加的，而是建立在众人个人理想基础之上的，是对社会成员个人理想的凝练和升华。 </p><h3 id="考点9（非重点）-在实现中国梦的实践中放飞青春梦想"><a href="#考点9（非重点）-在实现中国梦的实践中放飞青春梦想" class="headerlink" title="考点9（非重点） 在实现中国梦的实践中放飞青春梦想"></a>考点9（非重点） 在实现中国梦的实践中放飞青春梦想</h3><ol><li>立志当高远。</li><li>立志做大事。</li><li>立志须躬行。</li><li>伟大出自平凡。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 考研 </category>
          
          <category> 政治 </category>
          
          <category> 思修 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 考研 </tag>
            
            <tag> 思修 </tag>
            
            <tag> 徐涛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>统一建模语言UML01</title>
      <link href="/2020/02/21/%E5%85%B6%E4%BB%96/%E5%BE%85%E5%AD%A6%E8%AF%BE%E7%A8%8B/%E7%BB%9F%E4%B8%80%E5%BB%BA%E6%A8%A1%E8%AF%AD%E8%A8%80UML01/"/>
      <url>/2020/02/21/%E5%85%B6%E4%BB%96/%E5%BE%85%E5%AD%A6%E8%AF%BE%E7%A8%8B/%E7%BB%9F%E4%B8%80%E5%BB%BA%E6%A8%A1%E8%AF%AD%E8%A8%80UML01/</url>
      
        <content type="html"><![CDATA[<p>面向考试的常考概念题</p><span id="more"></span><h2 id="UML模型"><a href="#UML模型" class="headerlink" title="UML模型"></a>UML模型</h2><p><strong>UML</strong>（Unified Modeling Language）是一门<strong>语言</strong></p><p><img src="https://s2.ax1x.com/2020/02/21/3uoQHS.png" alt="3uoQHS.png"></p><p>这些图分为<strong>结构图</strong>和<strong>行为图</strong>。</p><h4 id="结构图"><a href="#结构图" class="headerlink" title="结构图"></a>结构图</h4><ul><li><strong>类图</strong><br>  静态事物的<strong>结构</strong>以及它们之间的<strong>相互关系</strong>。逻辑设计和物理设计。  </li><li><strong>构件图</strong><br>  一组构件的组织和彼此间的依赖关系。构件图说明系统如何实现，软件系统内构件如何协同工作。  </li><li><strong>对象图</strong><br>  对象图展示系统中的一组对象。它是系统在某一时刻的快照。对象图是图在某时刻的快照。  </li><li><strong>部署图</strong><br>  物理系统运行时的架构。描述系统中的硬件和硬件上驻留的软件。</li><li><strong>组合结构图</strong><br>  展示模型元素的内部结构</li><li><strong>包图</strong></li><li><strong>用例图</strong>   </li></ul><h4 id="行为图"><a href="#行为图" class="headerlink" title="行为图"></a>行为图</h4><ul><li><strong>活动图</strong><br>  系统内的活动流</li><li><strong>状态图</strong><br>  状态与状态间的转换</li><li><strong>合作图</strong><br>  对象间的合作与交互</li><li><strong>顺序图</strong><br>  强调时间顺序</li><li><strong>时间图</strong><br>  强调时间信息</li><li><strong>交互概述图</strong><br>  高层视图，从整体上显示交互序列之间的控制流</li></ul><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><p>面向对象最重要特点：<strong>自然性</strong>、<strong>重用性</strong><br>面向对象的基本特征：<strong>抽象</strong>、<strong>封装</strong>、<strong>继承</strong>、<strong>多态</strong></p><p>面向对象技术设计系统的步骤：  </p><ol><li>描述需求</li><li>根据需求建立系统的静态模型，以构造系统的结构</li><li>描述系统的行为</li></ol><p>前两步都是静态的，包括用例图、类图(包含包)、对象图、组件图和配置图，是UML的静态建模机制。  </p><p>第三步中建立的模型，或者可以执行，或者表示执行时的时序状态或交互关系。包括状态图、活动图、顺序图和合作图，是UML的动态建模机制。</p><p>因此，UML的主要内容也可以归纳为静态建模机制和动态建模机制两大类。</p>]]></content>
      
      
      <categories>
          
          <category> 非体系学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库01</title>
      <link href="/2020/02/21/%E5%85%B6%E4%BB%96/%E5%90%8E%E7%AB%AF/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%9301/"/>
      <url>/2020/02/21/%E5%85%B6%E4%BB%96/%E5%90%8E%E7%AB%AF/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%9301/</url>
      
        <content type="html"><![CDATA[<p>更新至第3章</p><span id="more"></span><h1 id="第一章-数据库概览"><a href="#第一章-数据库概览" class="headerlink" title="第一章 数据库概览"></a>第一章 数据库概览</h1><h2 id="数据库管理技术的进展"><a href="#数据库管理技术的进展" class="headerlink" title="数据库管理技术的进展"></a>数据库管理技术的进展</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p><strong>数据</strong>：描述事物的符号记录<br>数据的种类很多，<strong>文本</strong>、<strong>图形</strong>、<strong>图像</strong>、<strong>声音</strong>等都是数据。<br>数据的特点：  </p><ol><li>数据有 “型” 和 “值” 之分  </li><li>数据与其语义是不可分的</li></ol><p><strong>语义</strong>：数据的含义<br><strong>数据与其语义是不可分的</strong></p><p><strong>数据管理</strong>：对数据进行收集、分类、组织、编码、存储、检索和传输，是数据处理的<strong>中心问题</strong><br>（分类、组织、编码、存储、检索、维护）</p><p><strong>数据库</strong>：长期存在计算机内、有组织、可共享的数据集合</p><p><strong>数据库管理系统</strong>（<strong>DBMS</strong>）是位于用户与操作系统之间的系统软件。</p><h3 id="数据管理技术三个阶段"><a href="#数据管理技术三个阶段" class="headerlink" title="数据管理技术三个阶段"></a>数据管理技术三个阶段</h3><p>数据管理技术三个阶段：<strong>人工管理阶段</strong>、<strong>文件系统阶段</strong>、<strong>数据库系统阶段</strong></p><ul><li><p>人工管理阶段：</p><ol><li>数据不保存</li><li>应用程序管理数据</li><li>数据不共享</li><li>数据不具有独立性</li></ol></li><li><p>文件系统阶段：</p><ol><li>数据可以长期保存</li><li>由文件系统管理数据</li><li>数据共享性差，冗余度大</li><li>数据独立性差</li></ol></li><li><p>数据库阶段：</p><ol><li>数据整体结构化</li><li>数据共享性高、冗余度低、易于扩充</li><li>数据独立性高</li><li>数据由DBMS统一管理和控制</li></ol></li></ul><p>数据库系统实现整体数据的<strong>结构化</strong>。这是数据库系统与文件系统的根本区别。</p><h3 id="数据独立性"><a href="#数据独立性" class="headerlink" title="数据独立性"></a>数据独立性</h3><p><strong>数据独立性</strong>包括数据的<strong>逻辑独立性</strong>和数据的<strong>物理独立性</strong></p><ul><li>逻辑独立性：数据的逻辑结构改变了，程序不用改变  </li><li>物理独立性：数据的物理存储改变了，程序不用改变  </li></ul><p>（由DBMS处理这种改变）</p><h1 id="关系代数"><a href="#关系代数" class="headerlink" title="关系代数"></a>关系代数</h1><ul><li>投影：一属性的所有值 $\pi_{Sdept}(Student)$</li><li>连接：在R$\times$S中取满足关系的元组<ul><li>一般连接：随便什么关系</li><li>等值连接：R的A属性与S的B属性相同</li><li>自然连接：R的B属性与S的B属性相同</li></ul></li><li>除：R$\div$S：R(X,Y)，S(Y,Z) R中的X的像集要包含S中的Y的所有值</li></ul><h1 id="基本表"><a href="#基本表" class="headerlink" title="基本表"></a>基本表</h1><h3 id="基本表定义"><a href="#基本表定义" class="headerlink" title="基本表定义"></a>基本表定义</h3><p>CREATE TABLE &lt;基本表名&gt;(<br>    &lt;列名&gt; &lt;数据类型&gt; [ &lt;列级完整性约束条件&gt; ],<br>    &lt;表级完整性约束条件&gt;;<br>);</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> SPDGB (</span><br><span class="line">    客户编号 <span class="type">char</span>(<span class="number">5</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    数量 <span class="type">int</span>,</span><br><span class="line">    单价 <span class="type">float</span>,</span><br><span class="line">    保质期 datetime <span class="keyword">DEFAULT</span> <span class="string">&#x27;2000-1-1&#x27;</span>,</span><br><span class="line">    送货方式 <span class="type">varchar</span>(<span class="number">50</span>),</span><br><span class="line">    备注 text,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (客户编号，商品编号，订购时间),</span><br><span class="line">    <span class="comment">-- 主码</span></span><br><span class="line">    <span class="keyword">FOREIGN</span> KEY (客户编号) <span class="keyword">REFERENCES</span> KHB(客户编号),</span><br><span class="line">    <span class="keyword">FOREIGN</span> KEY (商品编号) <span class="keyword">REFERENCES</span> SPB(商品编号)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>定长字符串: char 变长字符串: varchar</p><h3 id="修改基本表"><a href="#修改基本表" class="headerlink" title="修改基本表"></a>修改基本表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="operator">&lt;</span>基本表名<span class="operator">&gt;</span></span><br><span class="line">    <span class="keyword">COLUMN</span> <span class="operator">&lt;</span>列名<span class="operator">&gt;</span> <span class="operator">&lt;</span>新数据类型<span class="operator">&gt;</span> <span class="keyword">NULL</span><span class="operator">|</span><span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="comment">-- 修改已有列定义</span></span><br><span class="line">    <span class="keyword">ADD</span> <span class="operator">&lt;</span>列名<span class="operator">&gt;</span> <span class="operator">&lt;</span>数据类型<span class="operator">&gt;</span> 约束 <span class="comment">-- 增加新列</span></span><br><span class="line">    <span class="keyword">DROP</span> <span class="keyword">COLUMN</span> <span class="operator">&lt;</span>列名<span class="operator">&gt;</span> <span class="comment">-- 删除列</span></span><br><span class="line">    <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> <span class="operator">&lt;</span>约束名<span class="operator">&gt;</span> <span class="operator">&lt;</span>约束定义<span class="operator">&gt;</span><span class="comment">-- 添加约束</span></span><br><span class="line">    <span class="keyword">DROP</span> <span class="keyword">CONSTRAINT</span> <span class="operator">&lt;</span>约束名<span class="operator">&gt;</span> <span class="comment">-- 删除约束constraint</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> SPB <span class="keyword">ADD</span> 商品图片 image</span><br><span class="line"><span class="comment">-- 不论基本表中原来是否已有数据，新增加的列一律为空值。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> SPB</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">COLUMN</span> 保质期 smalldatetime</span><br><span class="line"><span class="comment">-- 修改原有的列定义有可能会破坏已有数据</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> SPB <span class="keyword">DROP</span> <span class="keyword">COLUMN</span> 商品图片</span><br></pre></td></tr></table></figure><h3 id="删除基本表"><a href="#删除基本表" class="headerlink" title="删除基本表"></a>删除基本表</h3><p>DROP TABLE &lt;基本表名&gt;</p><h3 id="数据查询"><a href="#数据查询" class="headerlink" title="数据查询"></a>数据查询</h3><h4 id="单表查询"><a href="#单表查询" class="headerlink" title="单表查询"></a>单表查询</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">ALL</span><span class="operator">|</span><span class="keyword">DISTINCT</span> <span class="operator">&lt;</span>目标列表达式<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">FROM</span> <span class="operator">&lt;</span>表名或视图名<span class="operator">&gt;</span></span><br><span class="line">    <span class="keyword">WHERE</span> <span class="operator">&lt;</span>条件表达式<span class="operator">&gt;</span></span><br><span class="line">    <span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="operator">&lt;</span>列名<span class="number">1</span><span class="operator">&gt;</span> <span class="keyword">HAVING</span> <span class="operator">&lt;</span>条件表达式<span class="operator">&gt;</span></span><br><span class="line">    <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="operator">&lt;</span>列名<span class="number">2</span><span class="operator">&gt;</span> <span class="keyword">ASC</span><span class="operator">|</span><span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><ul><li>SELECT：指定要显示的属性列</li><li>FROM：指定查询对象(基本表或视图)</li><li>WHERE：指定查询条件</li><li>GROUP BY：查询结果按指定列的值分组</li><li>HAVING：筛选分组</li><li>ORDER BY：查询结果按指定列值的升序或降序排序</li></ul><p>WHERE Grade IS NOT NULL；</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web前端开发 MOOC 02</title>
      <link href="/2020/02/17/%E5%85%B6%E4%BB%96/%E5%89%8D%E7%AB%AF/Web%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91-MOOC-02/"/>
      <url>/2020/02/17/%E5%85%B6%E4%BB%96/%E5%89%8D%E7%AB%AF/Web%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91-MOOC-02/</url>
      
        <content type="html"><![CDATA[<p>更新至第四章 第2节 css定位机制  待更新</p><span id="more"></span><h2 id="css布局和定位"><a href="#css布局和定位" class="headerlink" title="css布局和定位"></a>css布局和定位</h2><h3 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h3><h4 id="盒子"><a href="#盒子" class="headerlink" title="盒子"></a>盒子</h4><ul><li>content 内容</li><li>height 高度</li><li>width 宽度</li><li>border 边框</li><li>padding 内边距</li><li>margin 外边距</li></ul><p><img src="https://s2.ax1x.com/2020/02/20/3mpBIP.jpg" alt="3mpBIP.jpg"></p><p><img src="https://s2.ax1x.com/2020/02/20/3mpwVI.jpg" alt="3mpwVI.jpg"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#box</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid</span><br><span class="line">    /* 边框为<span class="number">1px</span>，实线框 */</span><br><span class="line">    ·····</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">    balabala···</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="overflow属性"><a href="#overflow属性" class="headerlink" title="overflow属性"></a>overflow属性</h4><p>内容溢出盒子框，怎么显示</p><ul><li><kbd>overflow: hidden</kbd> 超出部分不显示</li><li><kbd>overflow: scoll</kbd> 显示滚动条</li><li><kbd>overflow: auto</kbd> 如果有超出部分，显示滚动条</li></ul><h4 id="border属性-边框的效果"><a href="#border属性-边框的效果" class="headerlink" title="border属性(边框的效果)"></a>border属性(边框的效果)</h4><ul><li>border-width 宽度 取值有px/thin(细)/medium(中)/thick(粗)</li><li>border-style 取值有dashed(虚线)/dotted(一排点点)/solid(实线)/double(双实线)</li><li>border-color</li></ul><p>border: width style color</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">border</span>:<span class="number">2px</span> solid red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">border-bottom</span>:<span class="number">1px</span> solid red;</span><br><span class="line">    <span class="comment">/* 只设置底部边框 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>应用：水平分割线</p><h4 id="padding（内边距）-margin（外边距）"><a href="#padding（内边距）-margin（外边距）" class="headerlink" title="padding（内边距） margin（外边距）"></a>padding（内边距） margin（外边距）</h4><p>对浏览器默认的设置清零</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">    <span class="attribute">margin</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="comment">/* 只有在取值为0的时候才可以省略单位 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>取值：px，%（外层盒子的宽度和高度）</p><p>分开的：<br><kbd>padding-top</kbd><br><kbd>padding-right</kbd><br><kbd>padding-bottom</kbd><br><kbd>padding-left</kbd></p><p>合在一起：<br>上右下左 (顺时针)</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">margin</span>: <span class="number">1px</span> <span class="number">2px</span> <span class="number">3px</span> <span class="number">4px</span>;</span><br><span class="line"><span class="comment">/*      👆  👉  👇  👈 */</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">margin</span>: <span class="number">1px</span> <span class="number">2px</span>;</span><br><span class="line"><span class="comment">/*     👆👇 👈👉 */</span></span><br></pre></td></tr></table></figure><p>将padding换成margin同样</p><p>Tips：</p><ol><li>如果定标签（div）作为样式的名字，每一个盒子独占一行</li><li>上下两个相邻的外边距合并成一个外边距，合并的结果是取两个的最大值</li><li>水平方向上不合并</li></ol><p>水平居中</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 图片、文字水平居中 */</span></span><br><span class="line"><span class="attribute">text-align</span>: center;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* div水平居中 */</span></span><br><span class="line"><span class="attribute">margin</span>: <span class="number">0</span> auto; </span><br><span class="line"><span class="comment">/* 上下可以随便设置，左右设置auto，浏览器根据外层盒子宽度和div区域的宽度再除以二，算出margin-left margin-right */</span></span><br></pre></td></tr></table></figure><h5 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h5><p><img src="https://s2.ax1x.com/2020/02/20/3mp156.jpg" alt="3mp156.jpg"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#newsimglist</span>&#123;</span><br><span class="line">    <span class="attribute">text-align</span>:center;</span><br><span class="line">    <span class="attribute">font-size</span>:<span class="number">0</span>; <span class="comment">/*否则图间有空隙*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#newsimglist</span> <span class="selector-tag">img</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">100px</span>; .</span><br><span class="line">    <span class="attribute">margin-left</span>:<span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#0cf</span>;</span><br><span class="line">    <span class="attribute">padding</span>:<span class="number">5px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="css定位机制"><a href="#css定位机制" class="headerlink" title="css定位机制"></a>css定位机制</h3><ul><li>文档流 flow （默认方式）</li><li>浮动 float</li><li>层 layer</li></ul><p><img src="https://s2.ax1x.com/2020/02/20/3mSRN6.jpg" alt="3mSRN6.jpg"></p><h4 id="文档流定位（flow）"><a href="#文档流定位（flow）" class="headerlink" title="文档流定位（flow）"></a>文档流定位（flow）</h4><p>元素类型转换：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: none/block/inline/inline-block;</span><br><span class="line">         <span class="comment">/* 不显示/block/inline/inline-block */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="block元素"><a href="#block元素" class="headerlink" title="block元素"></a>block元素</h5><ul><li>独占一行</li><li>元素的height、width、margin、padding都可设置</li></ul><p><kbd>&lt;div&gt;</kbd><br><kbd>&lt;p&gt;</kbd><br><kbd>&lt;h1/h2...h6&gt;</kbd><br><kbd>&lt;ol&gt;</kbd><br><kbd>&lt;ul&gt;</kbd><br><kbd>&lt;table&gt;</kbd><br><kbd>&lt;form&gt;</kbd></p><h5 id="inline元素"><a href="#inline元素" class="headerlink" title="inline元素"></a>inline元素</h5><ul><li>不独占行</li><li>width、height不可设置</li><li>width就是所包含的文字/图片的宽度</li></ul><p><kbd>&lt;span&gt;</kbd><br><kbd>&lt;a&gt;</kbd></p><p>两个inline类型的元素中间有间距。要想去除这个间距，可以将之转换成block等元素表示。做导航条的时候，采用<p>或<ul>/<li>标签包裹起来,来防止间距产生</p><h5 id="inline-block元素"><a href="#inline-block元素" class="headerlink" title="inline-block元素"></a>inline-block元素</h5><ul><li>不独占行</li><li>元素的height、width、margin、padding都可设置</li></ul><p><kbd>&lt;img&gt;</kbd></p><h4 id="浮动定位"><a href="#浮动定位" class="headerlink" title="浮动定位"></a>浮动定位</h4><p>div实现横向多列布局</p><p><kbd>&lt;&gt;</kbd><br><kbd>&lt;&gt;</kbd><br><kbd>&lt;&gt;</kbd></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Html/Css/Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>思修笔记(腿姐)</title>
      <link href="/2020/02/15/%E6%94%BF%E6%B2%BB/%E6%80%9D%E4%BF%AE%E7%AC%94%E8%AE%B0-%E8%85%BF%E5%A7%90/"/>
      <url>/2020/02/15/%E6%94%BF%E6%B2%BB/%E6%80%9D%E4%BF%AE%E7%AC%94%E8%AE%B0-%E8%85%BF%E5%A7%90/</url>
      
        <content type="html"><![CDATA[<h2 id="绪论-（选择）"><a href="#绪论-（选择）" class="headerlink" title="绪论 （选择）"></a>绪论 （选择）</h2><h3 id="时代新人以民族复兴为己任"><a href="#时代新人以民族复兴为己任" class="headerlink" title="时代新人以民族复兴为己任"></a>时代新人以民族复兴为己任</h3><p>新时代——时代新人</p><p><strong>钙</strong>、<strong>软骨病</strong>——<strong>理想信念</strong><br><strong>担当</strong>精神——决定人生价值的<strong>最大砝码</strong></p><span id="more"></span><h3 id="思想道德素质与法治修养"><a href="#思想道德素质与法治修养" class="headerlink" title="思想道德素质与法治修养"></a>思想道德素质与法治修养</h3><table><thead><tr><th>区别</th><th>思想道德</th><th>法律</th></tr></thead><tbody><tr><td>调节领域</td><td>大</td><td>小</td></tr><tr><td>调节方式</td><td>说服教育</td><td>国家强制力</td></tr><tr><td>调节目标</td><td>希望改正</td><td>强制改正</td></tr></tbody></table><ul><li>都是基本素质（<font color="#00dd00">先有道德，后有法律</font>）</li><li>都是调节思想行为、人际关系、维护社会秩序的重要手段（平等的，不是谁是谁的目的）</li><li>都是上层建筑，由经济基础决定并服务于它</li><li>思想道德为法律提供<font color="#dddd00">思想</font>指引和价值基础，法律为道德建设提供制度保障</li><li>道德滋养法律、丰富法律、支撑法律（相互也可）。以道德精神和价值促进引领全社会信仰法律</li></ul><h2 id="第一章-人生的青春之问"><a href="#第一章-人生的青春之问" class="headerlink" title="第一章 人生的青春之问"></a>第一章 人生的青春之问</h2><ul><li>人生观（选择）</li><li>人生价值（选择、分析）</li><li>人生矛盾（选择）</li></ul><h3 id="人生观（选择）"><a href="#人生观（选择）" class="headerlink" title="人生观（选择）"></a>人生观（选择）</h3><ol><li>人生观是世界观在对待人生问题上的具体体现，是世界观的重要组成部分</li><li>世界观决定人生观，人生观从属于世界观，没有</li></ol>]]></content>
      
      
      <categories>
          
          <category> 考研 </category>
          
          <category> 政治 </category>
          
          <category> 思修 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 考研 </tag>
            
            <tag> 腿姐 </tag>
            
            <tag> 思修 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web前端开发 MOOC 01</title>
      <link href="/2020/02/14/%E5%85%B6%E4%BB%96/%E5%89%8D%E7%AB%AF/Web%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91-MOOC-01/"/>
      <url>/2020/02/14/%E5%85%B6%E4%BB%96/%E5%89%8D%E7%AB%AF/Web%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91-MOOC-01/</url>
      
        <content type="html"><![CDATA[<p>更新至第三章 css样式 【完】</p><span id="more"></span><h2 id="css样式"><a href="#css样式" class="headerlink" title="css样式"></a>css样式</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">  <span class="comment">/* 字号 */</span></span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">  <span class="comment">/* 文字颜色 */</span></span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">  <span class="comment">/* 加粗 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="css添加方法"><a href="#css添加方法" class="headerlink" title="css添加方法"></a>css添加方法</h3><p>优先级：行内&gt;内嵌&gt;链接&gt;浏览器默认</p><h4 id="行内"><a href="#行内" class="headerlink" title="行内"></a>行内</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span> = <span class="string">&quot;color:red&quot;</span>&gt;</span></span><br><span class="line">     balabala</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="内嵌"><a href="#内嵌" class="headerlink" title="内嵌"></a>内嵌</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">p</span>&#123;</span></span><br><span class="line"><span class="css">  <span class="comment">/* 选择器 */</span></span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css/style.css&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 链接到  样式表型的文件   路径为css/style.css --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="css选择器"><a href="#css选择器" class="headerlink" title="css选择器"></a>css选择器</h3><h4 id="标签选择器"><a href="#标签选择器" class="headerlink" title="标签选择器"></a>标签选择器</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">  <span class="selector-tag">body</span>&#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="css">    <span class="attribute">font-size</span>: <span class="number">12px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">font</span>: <span class="string">&quot;黑体&quot;</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css">  <span class="comment">/* 主体 */</span></span></span><br><span class="line"><span class="css">  hr&#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css">  <span class="comment">/* 分割线 */</span></span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="类别选择器"><a href="#类别选择器" class="headerlink" title="类别选择器"></a>类别选择器</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">  <span class="selector-tag">p</span>&#123;<span class="attribute">font-size</span>:<span class="number">12px</span>;&#125;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.one</span>&#123;<span class="attribute">font-size</span>:<span class="number">18px</span>;&#125;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.two</span>&#123;<span class="attribute">font-size</span>:<span class="number">24px</span>&#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> bala <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;one&quot;</span>&gt;</span>bala<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;two&quot;</span>&gt;</span>bala<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="ID选择器"><a href="#ID选择器" class="headerlink" title="ID选择器"></a>ID选择器</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">  <span class="selector-id">#one</span>&#123;<span class="attribute">font-size</span>:<span class="number">12px</span>;&#125;</span></span><br><span class="line"><span class="css">  <span class="selector-id">#two</span>&#123;<span class="attribute">font-size</span>:<span class="number">24px</span>;&#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;one&quot;</span>&gt;</span>bala<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;two&quot;</span>&gt;</span>bala<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>ID选择器与类别选择器的区别：</p><ul><li>类别选择器可以多次引用、混用。混用以空格分开</li><li>ID选择器在当前页面是“唯一的引用一次”，可以与class混用，但是不可以多个同时使用 </li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;id1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;class1 class2&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="嵌套声明"><a href="#嵌套声明" class="headerlink" title="嵌套声明"></a>嵌套声明</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">  <span class="selector-tag">p</span> <span class="selector-tag">span</span>&#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>bala<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="集体声明"><a href="#集体声明" class="headerlink" title="集体声明"></a>集体声明</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">  <span class="selector-tag">h1</span>,<span class="selector-tag">p</span>&#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">text-align</span>:center;</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>bala<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>bala<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="全局声明"><a href="#全局声明" class="headerlink" title="全局声明"></a>全局声明</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">* &#123;</span></span><br><span class="line"><span class="css">  <span class="attribute">text-align</span>:center;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="css的文字样式"><a href="#css的文字样式" class="headerlink" title="css的文字样式"></a>css的文字样式</h3><h4 id="单位与颜色"><a href="#单位与颜色" class="headerlink" title="单位与颜色"></a>单位与颜色</h4><table><thead><tr><th>单位</th><th>描述</th></tr></thead><tbody><tr><td>px</td><td>像素</td></tr><tr><td>em</td><td>字符</td></tr><tr><td>%</td><td>百分比</td></tr></tbody></table><p>层次：<br>html —&gt; head/body —&gt; div —&gt; h1/p</p><table><thead><tr><th>颜色</th><th>描述</th></tr></thead><tbody><tr><td>red</td><td>颜色名</td></tr><tr><td>rgb(255,0,0)</td><td>RGB值 0,0,0为黑</td></tr><tr><td>rgb(100%,0%,0%)</td><td>RGB百分比值</td></tr><tr><td>rgba(255,0,0,1.0)</td><td>RGB值和透明度 0透明，1完全不透明</td></tr><tr><td>#ff0000</td><td>十六进制数 去掉重复位#f00</td></tr></tbody></table><h4 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h4><table><thead><tr><th>属性</th><th>描述</th><th>取值</th></tr></thead><tbody><tr><td>color</td><td>文本颜色</td><td>red #f00 rgb(255,0,0)</td></tr><tr><td>letter-spacing</td><td>字符间距</td><td>2px -3px</td></tr><tr><td>line-height</td><td>行高</td><td>14px 1.5em 120%</td></tr><tr><td>text-align</td><td>对齐</td><td>center left right justify</td></tr><tr><td>text-decoration</td><td>装饰线</td><td>none overline underline line-though</td></tr><tr><td>text-incent</td><td>首行缩进</td><td>2em</td></tr></tbody></table><p>当line-height==height时，文字垂直居中</p><table><thead><tr><th>属性</th><th>描述</th><th>举例</th></tr></thead><tbody><tr><td>font</td><td>所有字体属性一块设置</td><td>font:italic bond 18px/1.5em ‘幼圆’</td></tr><tr><td>font-family</td><td>字体系列</td><td>第一个没有就加载第二个…</td></tr><tr><td>font-size</td><td>字号</td><td>14px 120%</td></tr><tr><td>font-style</td><td>斜体</td><td>italic</td></tr><tr><td>font-weight</td><td>粗体</td><td>bold</td></tr></tbody></table><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">font</span>:italic bond <span class="number">18px</span>/<span class="number">1.5em</span> <span class="string">&#x27;幼圆&#x27;</span>;</span><br><span class="line">//   斜体   粗体  字号/行高   字体 </span><br></pre></td></tr></table></figure><h3 id="css的背景与超链接"><a href="#css的背景与超链接" class="headerlink" title="css的背景与超链接"></a>css的背景与超链接</h3><table><thead><tr><th>背景属性</th><th>举例</th></tr></thead><tbody><tr><td>background</td><td>background: #00FF00 url(bgimage.gif) no-repeat fixed top;</td></tr><tr><td>background-color</td><td></td></tr><tr><td>background-image</td><td>background-image: url(“../../media/examples/lizard.png”);</td></tr><tr><td>background-repeat</td><td>repeat 棋盘状填充 </br> repeat-x/y 横/纵向填充一排/列</br> no-repeat 就一个</td></tr></tbody></table><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">600px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">&quot;images/bg1.gif&quot;</span>) repeat-x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>链接</th><th>状态</th></tr></thead><tbody><tr><td>a</td><td>所有链接</td></tr><tr><td>a:link</td><td>普通、未被访问的链接</td></tr><tr><td>a:visited</td><td>用户已访问的链接</td></tr><tr><td>a:hover</td><td>鼠标指针位于链接上方悬停</td></tr><tr><td>a:active</td><td>链接被点击的时刻</td></tr></tbody></table><p><kbd>:</kbd> 伪类选择器</p><p>顺序：<br>a:link/visited -&gt; a:hover -&gt; a:active</p><h3 id="列表与表格"><a href="#列表与表格" class="headerlink" title="列表与表格"></a>列表与表格</h3><h4 id="css列表"><a href="#css列表" class="headerlink" title="css列表"></a>css列表</h4><table><thead><tr><th>列表属性</th><th>描述</th></tr></thead><tbody><tr><td>list-style</td><td>所有列表属性</td></tr><tr><td>list-style-image</td><td>为列表项标志设置图像</td></tr><tr><td>list-style-position</td><td>标志的位置</td></tr><tr><td>list-style-type</td><td>标志的类型</td></tr></tbody></table><table><thead><tr><th>list-style-type的取值</th><th>样式</th></tr></thead><tbody><tr><td>none</td><td>无</td></tr><tr><td>disc</td><td>默认，空心圆</td></tr><tr><td>circle</td><td>空心圆</td></tr><tr><td>square</td><td>实心方块</td></tr><tr><td>decimal</td><td>数字</td></tr><tr><td>lower-roman</td><td>小写罗马数字</td></tr><tr><td>upper-roman</td><td>大写罗马数字</td></tr><tr><td>lower-alpha</td><td>小写英文字母</td></tr><tr><td>upper-alpha</td><td>大写英文字母</td></tr><tr><td>lower-Greek</td><td>小写希腊字母</td></tr><tr><td>lower-latin</td><td>小写拉丁字母</td></tr><tr><td>upper-latin</td><td>大写拉丁字母</td></tr></tbody></table><table><thead><tr><th>list-style-positionq取值</th><th></th></tr></thead><tbody><tr><td>inside</td><td>列表项标号在文字里</td></tr><tr><td>outside</td><td>列表项标号在文字外</td></tr></tbody></table><p><img src="https://s2.ax1x.com/2020/02/20/3mpaqA.jpg" alt="3mpaqA.jpg"></p><h4 id="css表格"><a href="#css表格" class="headerlink" title="css表格"></a>css表格</h4><p>设置表格的宽和高</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">table</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">  <span class="comment">/* 表格宽 */</span></span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="comment">/* 表格高 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>设置表格的框</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">table</span>,<span class="selector-tag">td</span>,<span class="selector-tag">th</span>&#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#eee</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* table:外框  td:单个小框  th:表头 */</span></span><br></pre></td></tr></table></figure><p>表格框合并</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">table</span>&#123;</span><br><span class="line">  <span class="attribute">border-collapse</span>:collapse;</span><br><span class="line"><span class="comment">/* 将框与框合并，（要不然就有两个框了） */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>奇偶选择器<br><kbd>tr:nth-child(odd)</kbd>:奇数<br><kbd>tr:nth-child(even)</kbd>:偶数</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/* 将奇数行都变成#EAF2D3颜色，表头也算一行 */</span></span><br><span class="line"><span class="selector-tag">tr</span><span class="selector-pseudo">:nth-child</span>(odd)&#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#EAF2D3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Html/Css/Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用VSCode编写python中文乱码解决</title>
      <link href="/2020/01/29/%E5%85%B6%E4%BB%96/%E9%9B%B6%E6%95%A3%E9%97%AE%E9%A2%98/%E4%BD%BF%E7%94%A8VSCode%E7%BC%96%E5%86%99python%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E8%A7%A3%E5%86%B3/"/>
      <url>/2020/01/29/%E5%85%B6%E4%BB%96/%E9%9B%B6%E6%95%A3%E9%97%AE%E9%A2%98/%E4%BD%BF%E7%94%A8VSCode%E7%BC%96%E5%86%99python%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E8%A7%A3%E5%86%B3/</url>
      
        <content type="html"><![CDATA[<p>加入代码头</p><span id="more"></span><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*-coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="comment">#改变标准输出的默认编码</span></span><br><span class="line">sys.stdout=io.TextIOWrapper(sys.stdout.buffer,encoding=<span class="string">&#x27;utf8&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 零散问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小问题 </tag>
            
            <tag> VScode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python基础北理工MOOC01</title>
      <link href="/2020/01/29/%E5%85%B6%E4%BB%96/%E5%BE%85%E5%AD%A6%E8%AF%BE%E7%A8%8B/python%E5%9F%BA%E7%A1%80%E5%8C%97%E7%90%86%E5%B7%A5MOOC01/"/>
      <url>/2020/01/29/%E5%85%B6%E4%BB%96/%E5%BE%85%E5%AD%A6%E8%AF%BE%E7%A8%8B/python%E5%9F%BA%E7%A1%80%E5%8C%97%E7%90%86%E5%B7%A5MOOC01/</url>
      
        <content type="html"><![CDATA[<p>python的time库</p><span id="more"></span><h2 id="time库"><a href="#time库" class="headerlink" title="time库"></a>time库</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br></pre></td></tr></table></figure><h3 id="time"><a href="#time" class="headerlink" title="time()"></a>time()</h3><p><strong>time.time()</strong> 获取当前时间戳（一个浮点数）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span> (time.time())</span><br></pre></td></tr></table></figure><blockquote><p>1580290639.0466638</p></blockquote><p>只可表示 <strong>1970</strong> ~ <strong>2038</strong>  </p><h3 id="ctime"><a href="#ctime" class="headerlink" title="ctime()"></a>ctime()</h3><p><strong>ctime</strong> 以易读方式表示</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span> (time.ctime())</span><br></pre></td></tr></table></figure><blockquote><p>Wed Jan 29 17:50:18 2020</p></blockquote><h3 id="gmtime"><a href="#gmtime" class="headerlink" title="gmtime()"></a>gmtime()</h3><p><strong>time.gmtime()</strong> 返回计算机可处理的时间格式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span> (time.gmtime())</span><br><span class="line"><span class="comment">#获得的时间是服务器时间</span></span><br></pre></td></tr></table></figure><blockquote><p>time.struct_time(tm_year=2020, tm_mon=1, tm_mday=29, tm_hour=17, tm_min=23, tm_sec=55, tm_wday=2, tm_yday=29, tm_isdst=0)</p></blockquote><h3 id="时间格式化与-strfitime-tpl-ts-、striptime-str-tpl"><a href="#时间格式化与-strfitime-tpl-ts-、striptime-str-tpl" class="headerlink" title="时间格式化与 strfitime ( tpl , ts )、striptime ( str , tpl )"></a>时间格式化与 strfitime ( tpl , ts )、striptime ( str , tpl )</h3><table><thead><tr><th align="center">格式</th><th align="center">意义</th><th align="center">举例</th></tr></thead><tbody><tr><td align="center">%Y</td><td align="center">年</td><td align="center">2020</td></tr><tr><td align="center">%m</td><td align="center">月</td><td align="center">1</td></tr><tr><td align="center">%B</td><td align="center">月</td><td align="center">January</td></tr><tr><td align="center">%b</td><td align="center">月</td><td align="center">Jau</td></tr><tr><td align="center">%d</td><td align="center">日</td><td align="center">29</td></tr><tr><td align="center">%A</td><td align="center">星期几</td><td align="center">Wednesday</td></tr><tr><td align="center">%a</td><td align="center">星期几</td><td align="center">Wed</td></tr><tr><td align="center">%H</td><td align="center">时</td><td align="center">17</td></tr><tr><td align="center">%I</td><td align="center">时</td><td align="center">5</td></tr><tr><td align="center">%p</td><td align="center">上下午</td><td align="center">PM</td></tr><tr><td align="center">%M</td><td align="center">分</td><td align="center">44</td></tr><tr><td align="center">%S</td><td align="center">秒</td><td align="center">26</td></tr></tbody></table><p><strong>striftime（tpl，ts）</strong> 第一个参数是输出的时间格式，第二个是获得的时间<br>返回一个字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span> (time.strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>,time.gmtime()))</span><br><span class="line"><span class="comment">#输出服务器当前的时间</span></span><br></pre></td></tr></table></figure><blockquote><p>2020-01-29 09:59:09</p></blockquote><p><strong>striptime（str，tpl）</strong> 的第一个参数是字符串形式的时间值，第二个参数是输入的形式<br>返回一个计算机时间</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">strptime(<span class="string">&quot;2020-01-29 09:59:09&quot;</span>, <span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>time.struct_time(tm_year=2020, tm_mon=1, tm_mday=29, tm_hour=9, tm_min=59, tm_sec=9, tm_wday=2, tm_yday=29, tm_isdst=-1)</p></blockquote><p><strong>pref_counter()</strong> 程序计时函数，返回一个CPU级别的精确时间计数值，单位为秒，由于这个计数值起点不确定，连续调用差值才有意义</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>start = time.pref_counter()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>end = time.pref_counter()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>end - start</span><br></pre></td></tr></table></figure><p><strong>sleep(s)</strong> 使程序休眠s秒。s可以是浮点数</p>]]></content>
      
      
      <categories>
          
          <category> 非体系学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> MOOC笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java核心技术笔记02</title>
      <link href="/2020/01/29/%E5%85%B6%E4%BB%96/%E5%90%8E%E7%AB%AF/Java/Java%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B002/"/>
      <url>/2020/01/29/%E5%85%B6%E4%BB%96/%E5%90%8E%E7%AB%AF/Java/Java%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B002/</url>
      
        <content type="html"><![CDATA[<h5 id="page-from-76"><a href="#page-from-76" class="headerlink" title="page from 76"></a>page from 76</h5><h2 id="大数值"><a href="#大数值" class="headerlink" title="大数值"></a>大数值</h2><p>使用 <strong>java.math包</strong> 中的两个类： <strong>BigInteger</strong> 和 <strong>BigDecimal</strong>。  </p><span id="more"></span><h3 id="valueOf-NaN"><a href="#valueOf-NaN" class="headerlink" title="valueOf"></a>valueOf</h3><p><strong>静态的valueOf</strong> 方法可以将普通的数值转换为大数值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">BigInteger a=BigInteger.valueOf(<span class="number">100</span>);</span><br><span class="line">BigDecimal b=BigDecimal.valueOf(<span class="number">100</span>);</span><br></pre></td></tr></table></figure><h3 id="add、substract、multiply、divide、mod"><a href="#add、substract、multiply、divide、mod" class="headerlink" title="add、substract、multiply、divide、mod"></a>add、substract、multiply、divide、mod</h3><table><tr><td bgcolor=orang>不能使用算数运算符处理大数值</table></tr></td><p>而应使用BigInteger类中的 <strong>add</strong> 、 <strong>substract</strong> 、  <strong>multiply</strong> 、 <strong>divide</strong> 和 <strong>mod</strong> 方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">BigInteger c=d.add(e);</span><br><span class="line"><span class="comment">//c=d+e</span></span><br><span class="line"></span><br><span class="line">BigDecimal f=g.multiply(h.add(BigDecimal.valueOf(<span class="number">2</span>)));</span><br><span class="line"><span class="comment">//f=g*(h+2)</span></span><br><span class="line"></span><br><span class="line">BigDecimal a2=b2.divide(c2,BigDecimal.ROUND_HALF_UP);</span><br><span class="line"><span class="comment">//a2=b2/c2 结果四舍五入</span></span><br></pre></td></tr></table></figure><p><kbd>add</kbd> <kbd>substract</kbd> <kbd>multiply</kbd> <kbd>divide</kbd> <kbd>mod</kbd>  </p><h3 id="compareTo"><a href="#compareTo" class="headerlink" title="compareTo"></a>compareTo</h3><p><strong>int compareTo ( BigInteger other ) :</strong>  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">result = a.compareTo(b);</span><br><span class="line"><span class="comment">// 若a==b，返回 0；</span></span><br><span class="line"><span class="comment">// 若a&lt; b，返回负数；</span></span><br><span class="line"><span class="comment">// 若a&gt; b，返回正数</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 《Java核心技术》 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java核心技术笔记01</title>
      <link href="/2020/01/29/%E5%85%B6%E4%BB%96/%E5%90%8E%E7%AB%AF/Java/Java%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B001/"/>
      <url>/2020/01/29/%E5%85%B6%E4%BB%96/%E5%90%8E%E7%AB%AF/Java/Java%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B001/</url>
      
        <content type="html"><![CDATA[<h4 id="page-from-63"><a href="#page-from-63" class="headerlink" title="page from 63"></a>page from 63</h4><h2 id="控制流程"><a href="#控制流程" class="headerlink" title="控制流程"></a>控制流程</h2><span id="more"></span><h3 id="块作用域"><a href="#块作用域" class="headerlink" title="块作用域"></a>块作用域</h3><table><tr><td bgcolor=orang>不能在嵌套的两个块中声明同名变量</td></tr></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(string[] args)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    balabalabalabala...</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> n; <span class="comment">//不可！！！</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h3><p><kbd>if</kbd></p><h3 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h3><p><kbd>while</kbd>  <kbd>do while</kbd>  <kbd>for</kbd></p><h3 id="多重选择"><a href="#多重选择" class="headerlink" title="多重选择"></a>多重选择</h3><p><kbd>switch</kbd></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(<span class="keyword">char</span>/<span class="keyword">byte</span>/<span class="keyword">short</span>/<span class="keyword">int</span>/字符串字面量)&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="中断控制流程语句"><a href="#中断控制流程语句" class="headerlink" title="中断控制流程语句"></a>中断控制流程语句</h3><p><kbd>goto</kbd> <kbd>break</kbd> <kbd>continue</kbd></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 《Java核心技术》 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>公众号发表01</title>
      <link href="/2020/01/28/%E5%85%B6%E4%BB%96/%E5%90%8E%E7%AB%AF/Java/%E5%85%AC%E4%BC%97%E5%8F%B7%E5%8F%91%E8%A1%A8test1/"/>
      <url>/2020/01/28/%E5%85%B6%E4%BB%96/%E5%90%8E%E7%AB%AF/Java/%E5%85%AC%E4%BC%97%E5%8F%B7%E5%8F%91%E8%A1%A8test1/</url>
      
        <content type="html"><![CDATA[<h1 id="java-·-对象与类"><a href="#java-·-对象与类" class="headerlink" title="java · 对象与类"></a>java · 对象与类</h1><h2 id="面向对象程序设计-OOP"><a href="#面向对象程序设计-OOP" class="headerlink" title="面向对象程序设计(OOP)"></a>面向对象程序设计(OOP)</h2><p>学过 <strong>C/C++</strong> 的同学们都知道， <strong>Java</strong> 作为一个 <strong>面向对象程序设计</strong>（简称OOP）语言，有着其深刻的独到之处。  </p><p>面向对象的程序是由 <strong>对象</strong> 组成的。每个对象包含对用户 <strong>公开</strong> 的特定 <strong>功能</strong> 部分与 <strong>隐藏</strong> 的 <strong>实现</strong> 部分。  </p><p>程序中，有些对象来自 <strong>标准库</strong>，有些是自定义的。无论他们来自哪里，有一点是相同的，只要对象能够满足要求，就不必关心其功能的具体实现过程。  </p><span id="more"></span><table><tr><td bgcolor=orang>在OOP中，不必关心对象的具体实现,只要能够满足用户的需求即可</td></tr></table>  <blockquote><p>传统的结构化程序设计通过设计一系列的（算法）来求解问题。一旦确定了这些过程，就要开始考虑存储数据的方式。这就是 Pascal语言的设计者 Niklaus Wirth将其著作命名为《算法 + 数据结构 = 程序》（  <em>Algorithms + Data Structures = Programs</em> ， Prentice Hall，1975）的原因。需要注意的是，在 Wirth命名的书名中，算法是第一位的，数据结构是第二位的，这就明确地表述了程序员的工作方式。首先要确定如何操作数据，然后再决定如何存储数据，以便于数据操作。而OOP却调换了这个次序，将数据放在第一位，对于一些规模较小的问题，将其分解为过程的开发方式比较理想。而面向对象更加适合于解决规模较大的问题。<br>——《Java核心技术》 【美】凯 S.霍特思曼  </p></blockquote><h2 id="类-class"><a href="#类-class" class="headerlink" title="类(class)"></a>类(class)</h2><p><strong>类</strong> 是构造对象的模板。通过这个模板，可以创建无数个功能相似的 <strong>对象</strong>。由类构造（construct）对象的过程称为创建类的 <strong>实例</strong>（instance）。  </p><p>用Java编写的所有代码都位于某个类的内部。标准的Java库提供了几千个类，可以用于用户界面设计、日期、日历和网络程序设计。尽管如此，还是需要在Java程序中创建一些自己的类，以便描述应用程序所对应的问题域中的对象。  </p><p><strong>封装</strong> （encapsulation，又称数据隐藏），则是将数据和行为组合在一个包中，并对对象的使用者隐藏数据。对象中的数据称为 <strong>实例域</strong>（instance field），操纵数据的过程称为 <strong>方法</strong> （method），对于每个特定的类实例都有一组特定的实例域值。这些值的集合就是这个对象的当前状态（state）。无论何时，只要向对象发送一个消息，它的状态就有可能发生改变。  </p><blockquote><p>实现封装的关键在于。绝对不能让类中的方法直接地访问其他类的实例域。程序仅通过对象的方法与对象数据进行交互。封装给对象赋予了“盒”特征，这是提高重用性和可靠性的关键。这意味着一个类可以全面地改变存储数据的方式，只要仍旧使用同样的方法操作数据，其他对象就不会知道或介意所发生的变化。<br>————《Java核心技术》 【美】凯 S.霍特思曼  </p></blockquote><p>OOP的另一个原则是：可以通过扩展一个类来建立另外一个新的类。事实上，Java中所有的类都源自于一个超类，它就是 Object。这会在后面详细介绍。  </p><table><tr><td bgcolor=orang>可以通过扩展一个类来建立另外一个新的类</td></tr></table>  <p>被扩展后的新类具有原来类的全部属性和方法。因此在新类中，只需提供适用于这个新类的新方法和数据域就可以了。通过扩展一个类来建立另外一个类的过程称为 <strong>继承</strong> （inheritance）。</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 《Java核心技术》 </tag>
            
            <tag> 公众号 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown语法练习</title>
      <link href="/2020/01/27/%E5%B7%A5%E5%85%B7/markdown%E8%AF%AD%E6%B3%95%E7%BB%83%E4%B9%A0/"/>
      <url>/2020/01/27/%E5%B7%A5%E5%85%B7/markdown%E8%AF%AD%E6%B3%95%E7%BB%83%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="markdown笔记"><a href="#markdown笔记" class="headerlink" title="markdown笔记"></a>markdown笔记</h1><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><p><em>斜体</em><br><strong>粗体文本</strong><br><em><strong>粗斜体文本</strong></em>  </p><p><del>狗逼</del></p><span id="more"></span><p>分割线：    </p><hr><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a,b;</span><br><span class="line">    cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">    cout&lt;&lt;a+b&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><u>下划线</u>  </p><ul><li>马木木是个总裁</li><li>马木木还是个娱乐圈天王</li><li>马木木更是一个有一点点帅的小哥哥</li></ul><ol><li>马木木是个沙雕<ul><li>就一点点</li><li>就二点点</li><li>就三点点</li></ul></li><li>马木木是个冰雕<ul><li>就一雕雕</li><li>就二雕雕</li><li>就三雕雕</li></ul></li><li>马木木是个石雕</li></ol><blockquote><p>生活需要微笑，是微笑让这个世界变得更加温暖，变得更加的美丽生动，变得丰富多彩了有了微笑河流才那么清澈，有了微笑天空才那么蔚蓝。</p><blockquote><p>抬头三尺，即有神明。落寞或无助时，心中有希望;迷失时，心中有方向……</p></blockquote><p>风不懂云的漂泊，天不懂雨的落魄，眼不懂泪的懦弱，所以你不懂我的选择，也可以不懂我的难过，不是每个人都一定快乐，不是每种痛都一定要述说。</p></blockquote><p><a href="http://www.baidu.com/">百度</a></p><p><a href="http://www.baidu.com/">www.baidu.com</a></p><p><img src="http://i2.tiimg.com/708356/9ec5126e91dca4e7.png" alt="因为老板打赏了，就换一张图啦"></p><table><thead><tr><th>表头</th><th>表头</th></tr></thead><tbody><tr><td>单元格</td><td>单元格</td></tr><tr><td>单元格</td><td>单元格</td></tr></tbody></table><table><thead><tr><th align="left">左对齐</th><th align="right">右对齐</th><th align="center">居中对齐</th></tr></thead><tbody><tr><td align="left">单元格</td><td align="right">单元格</td><td align="center">单元格</td></tr><tr><td align="left">单元格</td><td align="right">单元格</td><td align="center">单元格</td></tr></tbody></table><p>链接也可以用变量来代替，文档末尾附带变量地址：<br>这个链接用 1 作为网址变量 <a href="http://www.google.com/">Google</a><br>这个链接用 runoob 作为网址变量 <a href="http://www.runoob.com/">Runoob</a><br>然后在文档的结尾为变量赋值（网址）</p><p>使用 <kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>Del</kbd> 重启电脑</p><p>** 正常显示星号 **</p><p>浅红色文字：<font color="#dd0000">浅红色</br>文字</font><br>深红色文字：<font color="#660000">深红色文字</font><br>浅绿色文字：<font color="#00dd00">浅绿色文字</font><br>深绿色文字：<font color="#006600">深绿色文字</font><br>浅蓝色文字：<font color="#0000dd">浅蓝色文字</font><br>深蓝色文字：<font color="#000066">深蓝色文字</font><br>浅黄色文字：<font color="#dddd00">浅黄色文字</font><br>深黄色文字：<font color="#666600">深黄色文字</font><br>浅青色文字：<font color="#00dddd">浅青色文字</font><br>深青色文字：<font color="#006666">深青色文字</font><br>浅紫色文字：<font color="#dd00dd">浅紫色文字</font><br>深紫色文字：<font color="#660066">深紫色文字</font>  </p><table><tr><td bgcolor=#FF00FF>背景色的设置是按照十六进制颜色值：#7FFFD4</td></tr></table><table><tr><td bgcolor=#FF83FA>背景色的设置是按照十六进制颜色值：#FF83FA</td></tr></table><table><tr><td bgcolor=#D1EEEE>背景色的设置是按照十六进制颜色值：#D1EEEE</td></tr></table><table><tr><td bgcolor=#C0FF3E>背景色的设置是按照十六进制颜色值：#C0FF3E</td></tr></table><table><tr><td bgcolor=#54FF9F>背景色的设置是按照十六进制颜色值：#54FF9F</td></tr></table>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
